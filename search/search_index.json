{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>A Crystal library for programatic git interactions.  Built over libgit2.</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#libgit2","title":"libgit2","text":"<p>Grits depends on <code>libgit2</code>, specifically <code>libgit2.so.1.3</code>.  </p> <p>This is done to ensure compatibility with libgit2. The easiest method is probably a build from the libgit2 v1.3.2 release</p> <p>See the libgit2 quick start for installation steps.</p>  <p>Note</p> <p>If you want support for the SSH transport, please make sure <code>LIBSSH2</code> is present when installing libgit2.</p>"},{"location":"#grits","title":"Grits","text":"<p>In your <code>shard.yml</code></p> <pre><code>dependencies:\n  grits:\n    gitlab: skinnyjames/grits\n</code></pre> <p>and run <code>shards install</code></p>"},{"location":"#usage","title":"Usage","text":"<p>Grits exposes a friendly interface for interacting with git abstractions.</p> <p>The primary entrypoint is Grits::Repo, but the aim of this shard is to support all libgit2 behaviors.</p> <p>For instance, interactive with a private remote repository using an ssh key looks like</p> <pre><code>require \"grits\"\n\n# create a new clone options\noptions = Grits::CloneOptions.default\n\n# define an `on_credentials_acquire` callback\noptions.fetch_options.on_credentials_acquire do |credential|\n  credential.add_ssh_key(\n    username: credential.username || \"git\",\n    public_key_path: \"/path/to/id_rsa.pub\",\n    private_key_path: \"/path/to/id_rsa\",\n  )\nend\n\ndest = \"#{__DIR__}/some_folder\"\n\nGrits::Repo.clone(\n  \"git@gitlab.com:&lt;username&gt;/&lt;private_repo&gt;.git\", \n  destination, \n  options\n) do |repo|\n  # interact with the repo..\n  # create a new untracked file\n  File.write(\"#{dest}/new.txt\", \"Hello Grits.\\n\")\n\n  repo.index do |stage|\n    # add the new file to the staging index\n    stage.add(\"new.txt\")\n\n    File.open(\"#{path}/new.txt\", \"a\") do |io|\n      io.print \"Goodbye.\\n\"\n    end\n\n    # diff the changes\n    stage.diff_workdir do |diff|\n      changes = diff.lines.map { |line| { line.hunk.header, line.content } }\n      puts changes # =&gt; [{\"@@ -1 +1,2 @@\\n\", \"Hello Grits.\\n\"}, {\"@@ -1 +1,2 @@\\n\", \"Goodbye.\\n\"}]\n    end\n\n    # Write the index to a tree and yield it for commit\n    stage.write_tree do |tree|\n      repo.commit_at(\"HEAD\") do |parent|\n        committer = author = { \n          email: \"sean@skinnyjames.net\", \n          name: \"Sean Gregory\", \n          time: Time.utc \n        }\n\n        tree.commit(\n          author: author,\n          message: \"Hello World\",\n          committer: committer,\n          parents: [parent],\n          update_ref: \"HEAD\"\n        ) do |commit|\n          puts commit.message # =&gt; \"Hello World\"\n        end\n      end\n    end\n  end\nend\n</code></pre>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Grits<ul> <li>Managing repositories</li> <li>Staging changes</li> <li>Diffing</li> <li>Committing</li> </ul> </li> <li>Library API</li> </ul>"},{"location":"Grits/","title":"Library API","text":""},{"location":"Grits/#Grits","title":"module <code>Grits</code>","text":"<p>A library for interacting with  git repositories programmatically.</p>"},{"location":"Grits/#Grits-constants","title":"Constants","text":""},{"location":"Grits/#Grits::VERSION","title":"<code>VERSION = \"0.1.0\"</code>","text":""},{"location":"Grits/#Grits-class-methods","title":"Class methods","text":""},{"location":"Grits/#Grits.get_tree_id(tree)","title":"<code>.get_tree_id(tree : Grits::Tree) : Oid</code>","text":"<p>Get a Grits::Oid from a Grits::Tree</p>"},{"location":"Grits/Branch/","title":"Branch","text":""},{"location":"Grits/Branch/#Grits::Branch","title":"class <code>Grits::Branch</code> inherits <code>Reference</code>","text":""},{"location":"Grits/Branch/#Grits::Branch-constructors","title":"Constructors","text":""},{"location":"Grits/Branch/#Grits::Branch.new(repo,ref)","title":"<code>.new(repo : Repo, ref : LibGit::Reference)</code>","text":""},{"location":"Grits/Branch/#Grits::Branch-class-methods","title":"Class methods","text":""},{"location":"Grits/Branch/#Grits::Branch.create(name,target,force)","title":"<code>.create(name : String, target : Commit, force : Bool = false)</code>","text":""},{"location":"Grits/Branch/#Grits::Branch.create(name,target,*,commit_ref,force)","title":"<code>.create(name : String, target : Repo, *, commit_ref : String = \"HEAD\", force : Bool = false)</code>","text":""},{"location":"Grits/Branch/#Grits::Branch-methods","title":"Methods","text":""},{"location":"Grits/Branch/#Grits::Branch#checked_out?","title":"<code>#checked_out? : Bool</code>","text":""},{"location":"Grits/Branch/#Grits::Branch#checkout(options)","title":"<code>#checkout(options : CheckoutOptions = CheckoutOptions.default) : Nil</code>","text":""},{"location":"Grits/Branch/#Grits::Branch#id","title":"<code>#id : Oid</code>","text":""},{"location":"Grits/Branch/#Grits::Branch#ref","title":"<code>#ref</code>","text":""},{"location":"Grits/Branch/#Grits::Branch#repo","title":"<code>#repo</code>","text":""},{"location":"Grits/Buffer/","title":"Buffer","text":""},{"location":"Grits/Buffer/#Grits::Buffer","title":"class <code>Grits::Buffer</code> inherits <code>Reference</code>","text":"Included modules <code>Grits::Mixins::Pointable</code>"},{"location":"Grits/Buffer/#Grits::Buffer-constructors","title":"Constructors","text":""},{"location":"Grits/Buffer/#Grits::Buffer.new(raw)","title":"<code>.new(raw : LibGit::Buf)</code>","text":""},{"location":"Grits/Buffer/#Grits::Buffer-class-methods","title":"Class methods","text":""},{"location":"Grits/Buffer/#Grits::Buffer.create","title":"<code>.create</code>","text":""},{"location":"Grits/Buffer/#Grits::Buffer-methods","title":"Methods","text":""},{"location":"Grits/Buffer/#Grits::Buffer#<<(value)","title":"<code>#&lt;&lt;(value : String)</code>","text":""},{"location":"Grits/Buffer/#Grits::Buffer#free","title":"<code>#free</code>","text":""},{"location":"Grits/Buffer/#Grits::Buffer#to_s","title":"<code>#to_s</code>","text":"<p>Returns a nicely readable and concise string representation of this object, typically intended for users.</p> <p>This method should usually not be overridden. It delegates to <code>#to_s(IO)</code> which can be overridden for custom implementations.</p> <p>Also see <code>#inspect</code>.</p>"},{"location":"Grits/CallbacksState/","title":"CallbacksState","text":""},{"location":"Grits/CallbacksState/#Grits::CallbacksState","title":"class <code>Grits::CallbacksState</code> inherits <code>Reference</code>","text":"<p>CallbacksState helps when multiple callbacks share the same payload.</p>  Direct known subclasses <code>Grits::DiffForeachCallbacks</code> <code>Grits::DiffOptionsCallbacks</code> <code>Grits::Remotable::CallbacksState</code> <code>Grits::TagForeachCallbacks</code>"},{"location":"Grits/CallbacksState/#Grits::CallbacksState-constructors","title":"Constructors","text":""},{"location":"Grits/CallbacksState/#Grits::CallbacksState.new","title":"<code>.new</code>","text":""},{"location":"Grits/CallbacksState/#Grits::CallbacksState-methods","title":"Methods","text":""},{"location":"Grits/CallbacksState/#Grits::CallbacksState#callbacks","title":"<code>#callbacks</code>","text":""},{"location":"Grits/CallbacksState/#Grits::CallbacksState#empty?","title":"<code>#empty?</code>","text":""},{"location":"Grits/CallbacksState/#Grits::CallbacksState-macros","title":"Macros","text":""},{"location":"Grits/CallbacksState/#Grits::CallbacksState:define_callback(type,key)","title":"<code>define_callback(type, key)</code>","text":""},{"location":"Grits/CheckoutNotifyCb/","title":"CheckoutNotifyCb","text":""},{"location":"Grits/CheckoutNotifyCb/#Grits::CheckoutNotifyCb","title":"alias <code>Grits::CheckoutNotifyCb</code>","text":"Alias definition <code>LibGit::CheckoutNotifyT, String, Grits::DiffFile, Grits::DiffFile, Grits::DiffFile -&gt; Nil</code>"},{"location":"Grits/CheckoutNotifyType/","title":"CheckoutNotifyType","text":""},{"location":"Grits/CheckoutNotifyType/#Grits::CheckoutNotifyType","title":"alias <code>Grits::CheckoutNotifyType</code>","text":"Alias definition <code>LibGit::CheckoutNotifyT</code>"},{"location":"Grits/CheckoutOptions/","title":"CheckoutOptions","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions","title":"class <code>Grits::CheckoutOptions</code> inherits <code>Reference</code>","text":"Included modules <code>Grits::Mixins::Pointable</code> <code>Grits::Mixins::Wrapper</code>"},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions-constructors","title":"Constructors","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions.new(raw)","title":"<code>.new(raw : LibGit::CheckoutOptions)</code>","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions-class-methods","title":"Class methods","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions.default","title":"<code>.default</code>","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions-methods","title":"Methods","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions#ancestor_label","title":"<code>#ancestor_label</code>","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions#dir_mode","title":"<code>#dir_mode</code>","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions#dir_mode=(value)","title":"<code>#dir_mode=(value)</code>","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions#disable_filters=(disable)","title":"<code>#disable_filters=(disable : Bool)</code>","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions#fild_open_flags","title":"<code>#fild_open_flags</code>","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions#fild_open_flags=(value)","title":"<code>#fild_open_flags=(value)</code>","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions#file_mode","title":"<code>#file_mode</code>","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions#file_mode=(value)","title":"<code>#file_mode=(value)</code>","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions#notify_flags","title":"<code>#notify_flags</code>","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions#notify_flags=(value)","title":"<code>#notify_flags=(value)</code>","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions#on_notify(flags,&)","title":"<code>#on_notify(flags : CheckoutNotifyType = CheckoutNotifyType::All, &amp;block : CheckoutNotifyCb)</code>","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions#on_performance_data(&)","title":"<code>#on_performance_data</code>","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions#on_progress(&)","title":"<code>#on_progress</code>","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions#our_label","title":"<code>#our_label</code>","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions#paths=(pathspec)","title":"<code>#paths=(pathspec = [] of String)</code>","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions#target_directory","title":"<code>#target_directory</code>","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions#target_directory=(value)","title":"<code>#target_directory=(value)</code>","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions#their_label","title":"<code>#their_label</code>","text":""},{"location":"Grits/CheckoutOptions/#Grits::CheckoutOptions#version","title":"<code>#version</code>","text":""},{"location":"Grits/CheckoutProgressCb/","title":"CheckoutProgressCb","text":""},{"location":"Grits/CheckoutProgressCb/#Grits::CheckoutProgressCb","title":"alias <code>Grits::CheckoutProgressCb</code>","text":"Alias definition <code>String, UInt64, UInt64 -&gt; Nil</code>"},{"location":"Grits/CloneLocalType/","title":"CloneLocalType","text":""},{"location":"Grits/CloneLocalType/#Grits::CloneLocalType","title":"alias <code>Grits::CloneLocalType</code>","text":"Alias definition <code>LibGit::CloneLocalT</code>"},{"location":"Grits/CloneOptions/","title":"CloneOptions","text":""},{"location":"Grits/CloneOptions/#Grits::CloneOptions","title":"class <code>Grits::CloneOptions</code> inherits <code>Reference</code>","text":"Included modules <code>Grits::Mixins::Pointable</code> <code>Grits::Mixins::Wrapper</code>"},{"location":"Grits/CloneOptions/#Grits::CloneOptions-constructors","title":"Constructors","text":""},{"location":"Grits/CloneOptions/#Grits::CloneOptions.new(raw)","title":"<code>.new(raw : LibGit::CloneOptions)</code>","text":""},{"location":"Grits/CloneOptions/#Grits::CloneOptions-class-methods","title":"Class methods","text":""},{"location":"Grits/CloneOptions/#Grits::CloneOptions.default","title":"<code>.default</code>","text":""},{"location":"Grits/CloneOptions/#Grits::CloneOptions-methods","title":"Methods","text":""},{"location":"Grits/CloneOptions/#Grits::CloneOptions#bare=(bares)","title":"<code>#bare=(bares : Bool)</code>","text":""},{"location":"Grits/CloneOptions/#Grits::CloneOptions#checkout_branch","title":"<code>#checkout_branch</code>","text":""},{"location":"Grits/CloneOptions/#Grits::CloneOptions#checkout_branch=(value)","title":"<code>#checkout_branch=(value)</code>","text":""},{"location":"Grits/CloneOptions/#Grits::CloneOptions#checkout_options","title":"<code>#checkout_options</code>","text":""},{"location":"Grits/CloneOptions/#Grits::CloneOptions#fetch_options","title":"<code>#fetch_options</code>","text":""},{"location":"Grits/CloneOptions/#Grits::CloneOptions#local=(type)","title":"<code>#local=(type : CloneLocalType)</code>","text":""},{"location":"Grits/CloneOptions/#Grits::CloneOptions#on_remote_create(&)","title":"<code>#on_remote_create</code>","text":""},{"location":"Grits/CloneOptions/#Grits::CloneOptions#on_repository_create(&)","title":"<code>#on_repository_create</code>","text":""},{"location":"Grits/CloneOptions/#Grits::CloneOptions#version","title":"<code>#version</code>","text":""},{"location":"Grits/Commit/","title":"Commit","text":""},{"location":"Grits/Commit/#Grits::Commit","title":"struct <code>Grits::Commit</code> inherits <code>Struct</code>","text":"Included modules <code>Grits::Mixins::Pointable</code>"},{"location":"Grits/Commit/#Grits::Commit-constructors","title":"Constructors","text":""},{"location":"Grits/Commit/#Grits::Commit.new(raw,repo)","title":"<code>.new(raw : LibGit::Commit, repo : Grits::Repo)</code>","text":""},{"location":"Grits/Commit/#Grits::Commit-class-methods","title":"Class methods","text":""},{"location":"Grits/Commit/#Grits::Commit.create(repo,*,message,author,committer,parents,tree,encoding,update_ref,&)","title":"<code>.create(repo : Grits::Repo, *, message : String, author : SignatureTuple, committer : SignatureTuple, parents : Array(Commit), tree : Grits::Tree, encoding : String = \"UTF-8\", update_ref : String | Reference</code>","text":""},{"location":"Grits/Commit/#Grits::Commit.lookup(repo,id)","title":"<code>.lookup(repo : Repo, id : Oid)</code>","text":""},{"location":"Grits/Commit/#Grits::Commit-methods","title":"Methods","text":""},{"location":"Grits/Commit/#Grits::Commit#author","title":"<code>#author : Signature</code>","text":""},{"location":"Grits/Commit/#Grits::Commit#committer","title":"<code>#committer : Signature</code>","text":""},{"location":"Grits/Commit/#Grits::Commit#data","title":"<code>#data</code>","text":""},{"location":"Grits/Commit/#Grits::Commit#free","title":"<code>#free</code>","text":""},{"location":"Grits/Commit/#Grits::Commit#id","title":"<code>#id</code>","text":""},{"location":"Grits/Commit/#Grits::Commit#message","title":"<code>#message</code>","text":""},{"location":"Grits/Commit/#Grits::Commit#repo","title":"<code>#repo</code>","text":""},{"location":"Grits/Commit/#Grits::Commit#sha","title":"<code>#sha</code>","text":""},{"location":"Grits/Commit/#Grits::Commit#tree(&)","title":"<code>#tree</code>","text":""},{"location":"Grits/Commit/#Grits::Commit#tree_id","title":"<code>#tree_id</code>","text":""},{"location":"Grits/Commit/SignatureTuple/","title":"SignatureTuple","text":""},{"location":"Grits/Commit/SignatureTuple/#Grits::Commit::SignatureTuple","title":"alias <code>Grits::Commit::SignatureTuple</code>","text":"Alias definition <code>{name: String, email: String, time: Time}</code>"},{"location":"Grits/CommitData/","title":"CommitData","text":""},{"location":"Grits/CommitData/#Grits::CommitData","title":"struct <code>Grits::CommitData</code> inherits <code>Struct</code>","text":""},{"location":"Grits/CommitData/#Grits::CommitData-constructors","title":"Constructors","text":""},{"location":"Grits/CommitData/#Grits::CommitData.new(message,author,committer,sha)","title":"<code>.new(message : String, author : SignatureData | Nil, committer : SignatureData | Nil, sha : String)</code>","text":""},{"location":"Grits/CommitData/#Grits::CommitData-methods","title":"Methods","text":""},{"location":"Grits/CommitData/#Grits::CommitData#author","title":"<code>#author : SignatureData | ::Nil</code>","text":""},{"location":"Grits/CommitData/#Grits::CommitData#clone","title":"<code>#clone</code>","text":""},{"location":"Grits/CommitData/#Grits::CommitData#committer","title":"<code>#committer : SignatureData | ::Nil</code>","text":""},{"location":"Grits/CommitData/#Grits::CommitData#copy_with(message,author,committer,sha)","title":"<code>#copy_with(message _message = @message, author _author = @author, committer _committer = @committer, sha _sha = @sha)</code>","text":""},{"location":"Grits/CommitData/#Grits::CommitData#message","title":"<code>#message : String</code>","text":""},{"location":"Grits/CommitData/#Grits::CommitData#sha","title":"<code>#sha : String</code>","text":""},{"location":"Grits/Config/","title":"Config","text":""},{"location":"Grits/Config/#Grits::Config","title":"class <code>Grits::Config</code> inherits <code>Reference</code>","text":"Included modules <code>Grits::Mixins::Pointable</code>"},{"location":"Grits/Config/#Grits::Config-constructors","title":"Constructors","text":""},{"location":"Grits/Config/#Grits::Config.new(raw)","title":"<code>.new(raw : LibGit::Config)</code>","text":""},{"location":"Grits/Config/#Grits::Config-methods","title":"Methods","text":""},{"location":"Grits/Config/#Grits::Config#free","title":"<code>#free</code>","text":""},{"location":"Grits/Config/#Grits::Config#get_bool(name)","title":"<code>#get_bool(name : String)</code>","text":""},{"location":"Grits/Config/#Grits::Config#mirror(name)","title":"<code>#mirror(name : String)</code>","text":""},{"location":"Grits/Config/#Grits::Config#set_bool(name,value)","title":"<code>#set_bool(name : String, value : Bool)</code>","text":""},{"location":"Grits/Credential/","title":"Credential","text":""},{"location":"Grits/Credential/#Grits::Credential","title":"struct <code>Grits::Credential</code> inherits <code>Struct</code>","text":"Included modules <code>Grits::Mixins::Pointable</code>"},{"location":"Grits/Credential/#Grits::Credential-constructors","title":"Constructors","text":""},{"location":"Grits/Credential/#Grits::Credential.new(raw,url,username)","title":"<code>.new(raw : Pointer(LibGit::Credential), url : String, username : String | Nil)</code>","text":""},{"location":"Grits/Credential/#Grits::Credential-methods","title":"Methods","text":""},{"location":"Grits/Credential/#Grits::Credential#add_ssh_key(*,username,public_key_path,private_key_path,passphrase)","title":"<code>#add_ssh_key(*, username : String, public_key_path : String, private_key_path : String, passphrase : String | Nil = nil)</code>","text":""},{"location":"Grits/Credential/#Grits::Credential#add_ssh_key(*,username,public_key,private_key,passphrase)","title":"<code>#add_ssh_key(*, username : String, public_key : String, private_key : String, passphrase : String | Nil = nil)</code>","text":""},{"location":"Grits/Credential/#Grits::Credential#add_user_pass(*,username,password)","title":"<code>#add_user_pass(*, username : String, password : String)</code>","text":""},{"location":"Grits/Credential/#Grits::Credential#from_ssh_agent(*,username)","title":"<code>#from_ssh_agent(*, username : String)</code>","text":""},{"location":"Grits/Credential/#Grits::Credential#url","title":"<code>#url</code>","text":""},{"location":"Grits/Credential/#Grits::Credential#username","title":"<code>#username</code>","text":""},{"location":"Grits/DeltaData/","title":"DeltaData","text":""},{"location":"Grits/DeltaData/#Grits::DeltaData","title":"struct <code>Grits::DeltaData</code> inherits <code>Struct</code>","text":""},{"location":"Grits/DeltaData/#Grits::DeltaData-constructors","title":"Constructors","text":""},{"location":"Grits/DeltaData/#Grits::DeltaData.new(new_file,old_file,files_count)","title":"<code>.new(new_file : DiffFileData | Nil, old_file : DiffFileData | Nil, files_count : Int64)</code>","text":""},{"location":"Grits/DeltaData/#Grits::DeltaData-methods","title":"Methods","text":""},{"location":"Grits/DeltaData/#Grits::DeltaData#clone","title":"<code>#clone</code>","text":""},{"location":"Grits/DeltaData/#Grits::DeltaData#copy_with(new_file,old_file,files_count)","title":"<code>#copy_with(new_file _new_file = @new_file, old_file _old_file = @old_file, files_count _files_count = @files_count)</code>","text":""},{"location":"Grits/DeltaData/#Grits::DeltaData#files_count","title":"<code>#files_count : Int64</code>","text":""},{"location":"Grits/DeltaData/#Grits::DeltaData#new_file","title":"<code>#new_file : DiffFileData | ::Nil</code>","text":""},{"location":"Grits/DeltaData/#Grits::DeltaData#old_file","title":"<code>#old_file : DiffFileData | ::Nil</code>","text":""},{"location":"Grits/Diff/","title":"Diff","text":""},{"location":"Grits/Diff/#Grits::Diff","title":"struct <code>Grits::Diff</code> inherits <code>Struct</code>","text":"Included modules <code>Grits::Mixins::Pointable</code>"},{"location":"Grits/Diff/#Grits::Diff-constructors","title":"Constructors","text":""},{"location":"Grits/Diff/#Grits::Diff.new(raw)","title":"<code>.new(raw : LibGit::Diff)</code>","text":""},{"location":"Grits/Diff/#Grits::Diff-class-methods","title":"Class methods","text":""},{"location":"Grits/Diff/#Grits::Diff.status_code(type)","title":"<code>.status_code(type : DiffDeltaType)</code>","text":""},{"location":"Grits/Diff/#Grits::Diff-methods","title":"Methods","text":""},{"location":"Grits/Diff/#Grits::Diff#delta(index)","title":"<code>#delta(index : LibC::SizeT)</code>","text":""},{"location":"Grits/Diff/#Grits::Diff#deltas(type)","title":"<code>#deltas(type : DiffDeltaType)</code>","text":""},{"location":"Grits/Diff/#Grits::Diff#deltas","title":"<code>#deltas : Int64</code>","text":""},{"location":"Grits/Diff/#Grits::Diff#files","title":"<code>#files : Array(DeltaData)</code>","text":""},{"location":"Grits/Diff/#Grits::Diff#free","title":"<code>#free</code>","text":""},{"location":"Grits/Diff/#Grits::Diff#hunks","title":"<code>#hunks</code>","text":""},{"location":"Grits/Diff/#Grits::Diff#iterate(iterator)","title":"<code>#iterate(iterator : Grits::DiffIterator)</code>","text":""},{"location":"Grits/Diff/#Grits::Diff#lines","title":"<code>#lines</code>","text":""},{"location":"Grits/DiffBinary/","title":"DiffBinary","text":""},{"location":"Grits/DiffBinary/#Grits::DiffBinary","title":"struct <code>Grits::DiffBinary</code> inherits <code>Struct</code>","text":"Included modules <code>Grits::Mixins::Wrapper</code>"},{"location":"Grits/DiffBinary/#Grits::DiffBinary-constructors","title":"Constructors","text":""},{"location":"Grits/DiffBinary/#Grits::DiffBinary.new(raw,delta)","title":"<code>.new(raw : Pointer(LibGit::DiffBinary), delta : Pointer(LibGit::DiffDelta))</code>","text":""},{"location":"Grits/DiffBinary/#Grits::DiffBinary-methods","title":"Methods","text":""},{"location":"Grits/DiffBinary/#Grits::DiffBinary#contains_data?","title":"<code>#contains_data?</code>","text":""},{"location":"Grits/DiffBinary/#Grits::DiffBinary#delta","title":"<code>#delta</code>","text":""},{"location":"Grits/DiffBinary/#Grits::DiffBinary#new","title":"<code>#new</code>","text":""},{"location":"Grits/DiffBinary/#Grits::DiffBinary#old","title":"<code>#old</code>","text":""},{"location":"Grits/DiffBinaryCb/","title":"DiffBinaryCb","text":""},{"location":"Grits/DiffBinaryCb/#Grits::DiffBinaryCb","title":"alias <code>Grits::DiffBinaryCb</code>","text":"Alias definition <code>Grits::DiffBinary -&gt; Nil</code>"},{"location":"Grits/DiffBinaryFile/","title":"DiffBinaryFile","text":""},{"location":"Grits/DiffBinaryFile/#Grits::DiffBinaryFile","title":"struct <code>Grits::DiffBinaryFile</code> inherits <code>Struct</code>","text":"Included modules <code>Grits::Mixins::Wrapper</code>"},{"location":"Grits/DiffBinaryFile/#Grits::DiffBinaryFile-constructors","title":"Constructors","text":""},{"location":"Grits/DiffBinaryFile/#Grits::DiffBinaryFile.new(raw)","title":"<code>.new(raw : LibGit::DiffBinaryFile)</code>","text":""},{"location":"Grits/DiffBinaryFile/#Grits::DiffBinaryFile-methods","title":"Methods","text":""},{"location":"Grits/DiffBinaryFile/#Grits::DiffBinaryFile#content","title":"<code>#content</code>","text":""},{"location":"Grits/DiffBinaryFile/#Grits::DiffBinaryFile#delta?","title":"<code>#delta?</code>","text":""},{"location":"Grits/DiffBinaryFile/#Grits::DiffBinaryFile#empty?","title":"<code>#empty?</code>","text":""},{"location":"Grits/DiffBinaryFile/#Grits::DiffBinaryFile#inflated_length","title":"<code>#inflated_length</code>","text":""},{"location":"Grits/DiffBinaryFile/#Grits::DiffBinaryFile#length","title":"<code>#length</code>","text":""},{"location":"Grits/DiffBinaryFile/#Grits::DiffBinaryFile#literal?","title":"<code>#literal?</code>","text":""},{"location":"Grits/DiffBinaryFile/#Grits::DiffBinaryFile#type","title":"<code>#type</code>","text":""},{"location":"Grits/DiffBinaryType/","title":"DiffBinaryType","text":""},{"location":"Grits/DiffBinaryType/#Grits::DiffBinaryType","title":"alias <code>Grits::DiffBinaryType</code>","text":"Alias definition <code>LibGit::DiffBinaryT</code>"},{"location":"Grits/DiffDelta/","title":"DiffDelta","text":""},{"location":"Grits/DiffDelta/#Grits::DiffDelta","title":"struct <code>Grits::DiffDelta</code> inherits <code>Struct</code>","text":"Included modules <code>Grits::Mixins::Pointable</code> <code>Grits::Mixins::Wrapper</code>"},{"location":"Grits/DiffDelta/#Grits::DiffDelta-constructors","title":"Constructors","text":""},{"location":"Grits/DiffDelta/#Grits::DiffDelta.new(raw)","title":"<code>.new(raw : Pointer(LibGit::DiffDelta))</code>","text":""},{"location":"Grits/DiffDelta/#Grits::DiffDelta-methods","title":"Methods","text":""},{"location":"Grits/DiffDelta/#Grits::DiffDelta#calculate_simliarity!(options)","title":"<code>#calculate_simliarity!(options = DiffFindOptions.default)</code>","text":""},{"location":"Grits/DiffDelta/#Grits::DiffDelta#data","title":"<code>#data</code>","text":""},{"location":"Grits/DiffDelta/#Grits::DiffDelta#files_count","title":"<code>#files_count</code>","text":""},{"location":"Grits/DiffDelta/#Grits::DiffDelta#flags","title":"<code>#flags</code>","text":""},{"location":"Grits/DiffDelta/#Grits::DiffDelta#new_file","title":"<code>#new_file : DiffFile | ::Nil</code>","text":""},{"location":"Grits/DiffDelta/#Grits::DiffDelta#old_file","title":"<code>#old_file : DiffFile | ::Nil</code>","text":""},{"location":"Grits/DiffDelta/#Grits::DiffDelta#status","title":"<code>#status</code>","text":""},{"location":"Grits/DiffDeltaType/","title":"DiffDeltaType","text":""},{"location":"Grits/DiffDeltaType/#Grits::DiffDeltaType","title":"alias <code>Grits::DiffDeltaType</code>","text":"Alias definition <code>LibGit::DeltaT</code>"},{"location":"Grits/DiffFile/","title":"DiffFile","text":""},{"location":"Grits/DiffFile/#Grits::DiffFile","title":"struct <code>Grits::DiffFile</code> inherits <code>Struct</code>","text":"Included modules <code>Grits::Mixins::Pointable</code> <code>Grits::Mixins::Wrapper</code>"},{"location":"Grits/DiffFile/#Grits::DiffFile-constructors","title":"Constructors","text":""},{"location":"Grits/DiffFile/#Grits::DiffFile.new(raw)","title":"<code>.new(raw : Pointer(LibGit::DiffFile))</code>","text":""},{"location":"Grits/DiffFile/#Grits::DiffFile-methods","title":"Methods","text":""},{"location":"Grits/DiffFile/#Grits::DiffFile#data","title":"<code>#data</code>","text":""},{"location":"Grits/DiffFile/#Grits::DiffFile#empty?","title":"<code>#empty?</code>","text":""},{"location":"Grits/DiffFile/#Grits::DiffFile#flags","title":"<code>#flags</code>","text":""},{"location":"Grits/DiffFile/#Grits::DiffFile#id","title":"<code>#id</code>","text":""},{"location":"Grits/DiffFile/#Grits::DiffFile#is_abbrev","title":"<code>#is_abbrev</code>","text":""},{"location":"Grits/DiffFile/#Grits::DiffFile#mode","title":"<code>#mode</code>","text":""},{"location":"Grits/DiffFile/#Grits::DiffFile#path","title":"<code>#path</code>","text":""},{"location":"Grits/DiffFile/#Grits::DiffFile#size","title":"<code>#size</code>","text":""},{"location":"Grits/DiffFileCb/","title":"DiffFileCb","text":""},{"location":"Grits/DiffFileCb/#Grits::DiffFileCb","title":"alias <code>Grits::DiffFileCb</code>","text":"Alias definition <code>Grits::DiffDelta, Float64 -&gt; Nil</code>"},{"location":"Grits/DiffFileData/","title":"DiffFileData","text":""},{"location":"Grits/DiffFileData/#Grits::DiffFileData","title":"struct <code>Grits::DiffFileData</code> inherits <code>Struct</code>","text":""},{"location":"Grits/DiffFileData/#Grits::DiffFileData-constructors","title":"Constructors","text":""},{"location":"Grits/DiffFileData/#Grits::DiffFileData.new(mode,path,id_length,sha)","title":"<code>.new(mode : LibGit::FilemodeT, path : String, id_length : Int32, sha : String)</code>","text":""},{"location":"Grits/DiffFileData/#Grits::DiffFileData-methods","title":"Methods","text":""},{"location":"Grits/DiffFileData/#Grits::DiffFileData#clone","title":"<code>#clone</code>","text":""},{"location":"Grits/DiffFileData/#Grits::DiffFileData#copy_with(mode,path,id_length,sha)","title":"<code>#copy_with(mode _mode = @mode, path _path = @path, id_length _id_length = @id_length, sha _sha = @sha)</code>","text":""},{"location":"Grits/DiffFileData/#Grits::DiffFileData#id_length","title":"<code>#id_length : Int32</code>","text":""},{"location":"Grits/DiffFileData/#Grits::DiffFileData#mode","title":"<code>#mode : LibGit::FilemodeT</code>","text":""},{"location":"Grits/DiffFileData/#Grits::DiffFileData#path","title":"<code>#path : String</code>","text":""},{"location":"Grits/DiffFileData/#Grits::DiffFileData#sha","title":"<code>#sha : String</code>","text":""},{"location":"Grits/DiffFindOptions/","title":"DiffFindOptions","text":""},{"location":"Grits/DiffFindOptions/#Grits::DiffFindOptions","title":"struct <code>Grits::DiffFindOptions</code> inherits <code>Struct</code>","text":""},{"location":"Grits/DiffFindOptions/#Grits::DiffFindOptions-constructors","title":"Constructors","text":""},{"location":"Grits/DiffFindOptions/#Grits::DiffFindOptions.new(raw)","title":"<code>.new(raw : LibGit::DiffFindOptions)</code>","text":""},{"location":"Grits/DiffFindOptions/#Grits::DiffFindOptions-class-methods","title":"Class methods","text":""},{"location":"Grits/DiffFindOptions/#Grits::DiffFindOptions.default","title":"<code>.default</code>","text":""},{"location":"Grits/DiffForeachCallbacks/","title":"DiffForeachCallbacks","text":""},{"location":"Grits/DiffForeachCallbacks/#Grits::DiffForeachCallbacks","title":"class <code>Grits::DiffForeachCallbacks</code> inherits <code>Grits::CallbacksState</code>","text":""},{"location":"Grits/DiffForeachCallbacks/#Grits::DiffForeachCallbacks-methods","title":"Methods","text":""},{"location":"Grits/DiffForeachCallbacks/#Grits::DiffForeachCallbacks#on_binary(&)","title":"<code>#on_binary</code>","text":""},{"location":"Grits/DiffForeachCallbacks/#Grits::DiffForeachCallbacks#on_binary","title":"<code>#on_binary</code>","text":""},{"location":"Grits/DiffForeachCallbacks/#Grits::DiffForeachCallbacks#on_file(&)","title":"<code>#on_file</code>","text":""},{"location":"Grits/DiffForeachCallbacks/#Grits::DiffForeachCallbacks#on_file","title":"<code>#on_file</code>","text":""},{"location":"Grits/DiffForeachCallbacks/#Grits::DiffForeachCallbacks#on_hunk(&)","title":"<code>#on_hunk</code>","text":""},{"location":"Grits/DiffForeachCallbacks/#Grits::DiffForeachCallbacks#on_hunk","title":"<code>#on_hunk</code>","text":""},{"location":"Grits/DiffForeachCallbacks/#Grits::DiffForeachCallbacks#on_line(&)","title":"<code>#on_line</code>","text":""},{"location":"Grits/DiffForeachCallbacks/#Grits::DiffForeachCallbacks#on_line","title":"<code>#on_line</code>","text":""},{"location":"Grits/DiffHunk/","title":"DiffHunk","text":""},{"location":"Grits/DiffHunk/#Grits::DiffHunk","title":"struct <code>Grits::DiffHunk</code> inherits <code>Struct</code>","text":"Included modules <code>Grits::Mixins::Wrapper</code>"},{"location":"Grits/DiffHunk/#Grits::DiffHunk-constructors","title":"Constructors","text":""},{"location":"Grits/DiffHunk/#Grits::DiffHunk.new(raw,delta)","title":"<code>.new(raw : Pointer(LibGit::DiffHunk), delta : Pointer(LibGit::DiffDelta))</code>","text":""},{"location":"Grits/DiffHunk/#Grits::DiffHunk-methods","title":"Methods","text":""},{"location":"Grits/DiffHunk/#Grits::DiffHunk#data","title":"<code>#data</code>","text":""},{"location":"Grits/DiffHunk/#Grits::DiffHunk#delta","title":"<code>#delta</code>","text":""},{"location":"Grits/DiffHunk/#Grits::DiffHunk#header","title":"<code>#header</code>","text":""},{"location":"Grits/DiffHunk/#Grits::DiffHunk#new_lines","title":"<code>#new_lines : Int32</code>","text":""},{"location":"Grits/DiffHunk/#Grits::DiffHunk#new_start","title":"<code>#new_start</code>","text":""},{"location":"Grits/DiffHunk/#Grits::DiffHunk#old_lines","title":"<code>#old_lines</code>","text":""},{"location":"Grits/DiffHunk/#Grits::DiffHunk#old_start","title":"<code>#old_start</code>","text":""},{"location":"Grits/DiffHunkCb/","title":"DiffHunkCb","text":""},{"location":"Grits/DiffHunkCb/#Grits::DiffHunkCb","title":"alias <code>Grits::DiffHunkCb</code>","text":"Alias definition <code>Grits::DiffHunk -&gt; Nil</code>"},{"location":"Grits/DiffIterator/","title":"DiffIterator","text":""},{"location":"Grits/DiffIterator/#Grits::DiffIterator","title":"struct <code>Grits::DiffIterator</code> inherits <code>Struct</code>","text":"Included modules <code>Grits::Mixins::Callbacks</code>"},{"location":"Grits/DiffIterator/#Grits::DiffIterator-constructors","title":"Constructors","text":""},{"location":"Grits/DiffIterator/#Grits::DiffIterator.new","title":"<code>.new</code>","text":""},{"location":"Grits/DiffIterator/#Grits::DiffIterator-methods","title":"Methods","text":""},{"location":"Grits/DiffIterator/#Grits::DiffIterator#add_callbacks","title":"<code>#add_callbacks</code>","text":"<p>includer should make an method that </p>"},{"location":"Grits/DiffIterator/#Grits::DiffIterator#execute(diff)","title":"<code>#execute(diff : Grits::Diff)</code>","text":""},{"location":"Grits/DiffIterator/#Grits::DiffIterator#initialize","title":"<code>#initialize</code>","text":""},{"location":"Grits/DiffIterator/#Grits::DiffIterator#on_binary(&)","title":"<code>#on_binary</code>","text":""},{"location":"Grits/DiffIterator/#Grits::DiffIterator#on_file(&)","title":"<code>#on_file</code>","text":""},{"location":"Grits/DiffIterator/#Grits::DiffIterator#on_hunk(&)","title":"<code>#on_hunk</code>","text":""},{"location":"Grits/DiffIterator/#Grits::DiffIterator#on_line(&)","title":"<code>#on_line</code>","text":""},{"location":"Grits/DiffLine/","title":"DiffLine","text":""},{"location":"Grits/DiffLine/#Grits::DiffLine","title":"struct <code>Grits::DiffLine</code> inherits <code>Struct</code>","text":"Included modules <code>Grits::Mixins::Wrapper</code>"},{"location":"Grits/DiffLine/#Grits::DiffLine-constructors","title":"Constructors","text":""},{"location":"Grits/DiffLine/#Grits::DiffLine.new(raw,hunk,delta)","title":"<code>.new(raw : Pointer(LibGit::DiffLine), hunk : Pointer(LibGit::DiffHunk), delta : Pointer(LibGit::DiffDelta))</code>","text":""},{"location":"Grits/DiffLine/#Grits::DiffLine-methods","title":"Methods","text":""},{"location":"Grits/DiffLine/#Grits::DiffLine#added?","title":"<code>#added?</code>","text":""},{"location":"Grits/DiffLine/#Grits::DiffLine#content","title":"<code>#content : String | ::Nil</code>","text":""},{"location":"Grits/DiffLine/#Grits::DiffLine#content_offset","title":"<code>#content_offset</code>","text":""},{"location":"Grits/DiffLine/#Grits::DiffLine#data","title":"<code>#data</code>","text":""},{"location":"Grits/DiffLine/#Grits::DiffLine#deleted?","title":"<code>#deleted?</code>","text":""},{"location":"Grits/DiffLine/#Grits::DiffLine#hunk","title":"<code>#hunk</code>","text":""},{"location":"Grits/DiffLine/#Grits::DiffLine#new_lineno","title":"<code>#new_lineno</code>","text":""},{"location":"Grits/DiffLine/#Grits::DiffLine#num_lines","title":"<code>#num_lines</code>","text":""},{"location":"Grits/DiffLine/#Grits::DiffLine#old_lineno","title":"<code>#old_lineno</code>","text":""},{"location":"Grits/DiffLine/#Grits::DiffLine#origin","title":"<code>#origin</code>","text":""},{"location":"Grits/DiffLineCb/","title":"DiffLineCb","text":""},{"location":"Grits/DiffLineCb/#Grits::DiffLineCb","title":"alias <code>Grits::DiffLineCb</code>","text":"Alias definition <code>Grits::DiffLine -&gt; Nil</code>"},{"location":"Grits/DiffNotifyResult/","title":"DiffNotifyResult","text":""},{"location":"Grits/DiffNotifyResult/#Grits::DiffNotifyResult","title":"enum <code>Grits::DiffNotifyResult</code>","text":""},{"location":"Grits/DiffNotifyResult/#Grits::DiffNotifyResult-members","title":"Members","text":""},{"location":"Grits/DiffNotifyResult/#Grits::DiffNotifyResult::Abort","title":"<code>Abort = -1</code>","text":""},{"location":"Grits/DiffNotifyResult/#Grits::DiffNotifyResult::Continue","title":"<code>Continue = 0</code>","text":""},{"location":"Grits/DiffNotifyResult/#Grits::DiffNotifyResult::Skip","title":"<code>Skip = 1</code>","text":""},{"location":"Grits/DiffNotifyResult/#Grits::DiffNotifyResult-methods","title":"Methods","text":""},{"location":"Grits/DiffNotifyResult/#Grits::DiffNotifyResult#abort?","title":"<code>#abort?</code>","text":""},{"location":"Grits/DiffNotifyResult/#Grits::DiffNotifyResult#continue?","title":"<code>#continue?</code>","text":""},{"location":"Grits/DiffNotifyResult/#Grits::DiffNotifyResult#skip?","title":"<code>#skip?</code>","text":""},{"location":"Grits/DiffOptions/","title":"DiffOptions","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions","title":"struct <code>Grits::DiffOptions</code> inherits <code>Struct</code>","text":"Included modules <code>Grits::Mixins::Callbacks</code> <code>Grits::Mixins::Pointable</code> <code>Grits::Mixins::Wrapper</code>"},{"location":"Grits/DiffOptions/#Grits::DiffOptions-constructors","title":"Constructors","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions.default","title":"<code>.default : DiffOptions</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions.new(raw)","title":"<code>.new(raw : LibGit::DiffOptions)</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions-methods","title":"Methods","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#computed_unsafe","title":"<code>#computed_unsafe</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#computed_unsafe_ptr","title":"<code>#computed_unsafe_ptr</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#context_lines","title":"<code>#context_lines</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#context_lines=(value)","title":"<code>#context_lines=(value)</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#disable_pathspec_match","title":"<code>#disable_pathspec_match : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#enable_fast_untracked_dirs","title":"<code>#enable_fast_untracked_dirs : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#flags=(flags)","title":"<code>#flags=(flags : Array(Type))</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#force_binary","title":"<code>#force_binary : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#force_text","title":"<code>#force_text : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#id_abbrev","title":"<code>#id_abbrev</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#id_abbrev=(value)","title":"<code>#id_abbrev=(value)</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#ignore_blank_lines","title":"<code>#ignore_blank_lines : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#ignore_case","title":"<code>#ignore_case : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#ignore_case_change","title":"<code>#ignore_case_change : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#ignore_filemode","title":"<code>#ignore_filemode : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#ignore_submodules","title":"<code>#ignore_submodules</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#ignore_submodules=(val)","title":"<code>#ignore_submodules=(val : SubmoduleIgnore)</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#ignore_whitespace","title":"<code>#ignore_whitespace : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#ignore_whitespace_change","title":"<code>#ignore_whitespace_change : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#ignore_whitespace_eol","title":"<code>#ignore_whitespace_eol : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#include_ignored","title":"<code>#include_ignored : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#include_typechange","title":"<code>#include_typechange : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#include_typechange_trees","title":"<code>#include_typechange_trees : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#include_unreadable","title":"<code>#include_unreadable : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#include_unreadable_as_untracked","title":"<code>#include_unreadable_as_untracked : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#include_untracked","title":"<code>#include_untracked : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#indent_heuristic","title":"<code>#indent_heuristic : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#interhunk_lines","title":"<code>#interhunk_lines</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#interhunk_lines=(value)","title":"<code>#interhunk_lines=(value)</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#max_size","title":"<code>#max_size</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#max_size=(size)","title":"<code>#max_size=(size : Int64)</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#minimal","title":"<code>#minimal : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#new_prefix","title":"<code>#new_prefix : String</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#new_prefix=(val)","title":"<code>#new_prefix=(val)</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#normal","title":"<code>#normal : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#old_prefix","title":"<code>#old_prefix : String</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#old_prefix=(val)","title":"<code>#old_prefix=(val)</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#on_notify(&)","title":"<code>#on_notify</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#on_progress(&)","title":"<code>#on_progress</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#pathspec=(paths)","title":"<code>#pathspec=(paths : Array(String))</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#patience","title":"<code>#patience : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#recurse_ignored_dirs","title":"<code>#recurse_ignored_dirs : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#reverse","title":"<code>#reverse : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#show_binary","title":"<code>#show_binary : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#show_unmodified","title":"<code>#show_unmodified : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#show_untracked_content","title":"<code>#show_untracked_content : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#skip_binary_check","title":"<code>#skip_binary_check : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#update_index","title":"<code>#update_index : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions#use_ignore_submodules","title":"<code>#use_ignore_submodules : Nil</code>","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions-macros","title":"Macros","text":""},{"location":"Grits/DiffOptions/#Grits::DiffOptions:add_flag_method(method,type)","title":"<code>add_flag_method(method, type)</code>","text":""},{"location":"Grits/DiffOptions/SubmoduleIgnore/","title":"SubmoduleIgnore","text":""},{"location":"Grits/DiffOptions/SubmoduleIgnore/#Grits::DiffOptions::SubmoduleIgnore","title":"alias <code>Grits::DiffOptions::SubmoduleIgnore</code>","text":"Alias definition <code>LibGit::SubmoduleIgnoreT</code>"},{"location":"Grits/DiffOptions/Type/","title":"Type","text":""},{"location":"Grits/DiffOptions/Type/#Grits::DiffOptions::Type","title":"alias <code>Grits::DiffOptions::Type</code>","text":"Alias definition <code>LibGit::DiffOptionT</code>"},{"location":"Grits/DiffOptionsCallbacks/","title":"DiffOptionsCallbacks","text":""},{"location":"Grits/DiffOptionsCallbacks/#Grits::DiffOptionsCallbacks","title":"class <code>Grits::DiffOptionsCallbacks</code> inherits <code>Grits::CallbacksState</code>","text":""},{"location":"Grits/DiffOptionsCallbacks/#Grits::DiffOptionsCallbacks-methods","title":"Methods","text":""},{"location":"Grits/DiffOptionsCallbacks/#Grits::DiffOptionsCallbacks#on_notify(&)","title":"<code>#on_notify</code>","text":""},{"location":"Grits/DiffOptionsCallbacks/#Grits::DiffOptionsCallbacks#on_notify","title":"<code>#on_notify</code>","text":""},{"location":"Grits/DiffOptionsCallbacks/#Grits::DiffOptionsCallbacks#on_progress(&)","title":"<code>#on_progress</code>","text":""},{"location":"Grits/DiffOptionsCallbacks/#Grits::DiffOptionsCallbacks#on_progress","title":"<code>#on_progress</code>","text":""},{"location":"Grits/DiffOptionsNotifyCb/","title":"DiffOptionsNotifyCb","text":""},{"location":"Grits/DiffOptionsNotifyCb/#Grits::DiffOptionsNotifyCb","title":"alias <code>Grits::DiffOptionsNotifyCb</code>","text":"<p>@param &lt;Diff&gt; the diff in progress @param &lt;DiffDelta&gt; the delta to add @param &lt;String&gt; the matched pathspec @return &lt;DiffNotifyResult&gt; Abort | Continue | Skip</p>  Alias definition <code>Grits::Diff, Grits::DiffDelta, String -&gt; Grits::DiffNotifyResult</code>"},{"location":"Grits/DiffOptionsProgressCb/","title":"DiffOptionsProgressCb","text":""},{"location":"Grits/DiffOptionsProgressCb/#Grits::DiffOptionsProgressCb","title":"alias <code>Grits::DiffOptionsProgressCb</code>","text":"<p>@param &lt;Diff&gt; the diff in progress @param &lt;String&gt; path to old file or nil @param &lt;String&gt; path to new file or nil @return &lt;Bool&gt; abort the diff?</p>  Alias definition <code>Grits::Diff, String?, String? -&gt; Bool</code>"},{"location":"Grits/EachTagInfo/","title":"EachTagInfo","text":""},{"location":"Grits/EachTagInfo/#Grits::EachTagInfo","title":"alias <code>Grits::EachTagInfo</code>","text":"<p>@param &lt;String&gt; the tag name. @param &lt;Grits::Oid&gt; the tag id @return &lt;Bool&gt; abort the iteration?</p>  Alias definition <code>String, Grits::Oid -&gt; Bool</code>"},{"location":"Grits/Error/","title":"Error","text":""},{"location":"Grits/Error/#Grits::Error","title":"module <code>Grits::Error</code>","text":""},{"location":"Grits/Error/#Grits::Error-class-methods","title":"Class methods","text":""},{"location":"Grits/Error/#Grits::Error.giterr(status,errstr)","title":"<code>.giterr(status, errstr : String)</code>","text":""},{"location":"Grits/Error/Generic/","title":"Generic","text":""},{"location":"Grits/Error/Generic/#Grits::Error::Generic","title":"class <code>Grits::Error::Generic</code> inherits <code>Exception</code>","text":""},{"location":"Grits/Error/Git/","title":"Git","text":""},{"location":"Grits/Error/Git/#Grits::Error::Git","title":"class <code>Grits::Error::Git</code> inherits <code>Exception</code>","text":""},{"location":"Grits/Error/Git/#Grits::Error::Git-constructors","title":"Constructors","text":""},{"location":"Grits/Error/Git/#Grits::Error::Git.new(code,message)","title":"<code>.new(code : Int, message)</code>","text":""},{"location":"Grits/FetchOptions/","title":"FetchOptions","text":""},{"location":"Grits/FetchOptions/#Grits::FetchOptions","title":"struct <code>Grits::FetchOptions</code> inherits <code>Struct</code>","text":"Included modules <code>Grits::Mixins::Callbacks</code> <code>Grits::Mixins::Pointable</code> <code>Grits::Mixins::Wrapper</code>"},{"location":"Grits/FetchOptions/#Grits::FetchOptions-constructors","title":"Constructors","text":""},{"location":"Grits/FetchOptions/#Grits::FetchOptions.new(raw)","title":"<code>.new(raw : LibGit::FetchOptions)</code>","text":""},{"location":"Grits/FetchOptions/#Grits::FetchOptions-class-methods","title":"Class methods","text":""},{"location":"Grits/FetchOptions/#Grits::FetchOptions.default","title":"<code>.default</code>","text":""},{"location":"Grits/FetchOptions/#Grits::FetchOptions-methods","title":"Methods","text":""},{"location":"Grits/FetchOptions/#Grits::FetchOptions#configure_proxy(&)","title":"<code>#configure_proxy</code>","text":""},{"location":"Grits/FetchOptions/#Grits::FetchOptions#download_tags=(type)","title":"<code>#download_tags=(type : TagOptions)</code>","text":""},{"location":"Grits/FetchOptions/#Grits::FetchOptions#headers=(headers)","title":"<code>#headers=(headers : Hash(String, String))</code>","text":""},{"location":"Grits/FetchOptions/#Grits::FetchOptions#on_certificate_check(&)","title":"<code>#on_certificate_check</code>","text":""},{"location":"Grits/FetchOptions/#Grits::FetchOptions#on_credentials_acquire(&)","title":"<code>#on_credentials_acquire</code>","text":""},{"location":"Grits/FetchOptions/#Grits::FetchOptions#on_resolve_url(&)","title":"<code>#on_resolve_url</code>","text":""},{"location":"Grits/FetchOptions/#Grits::FetchOptions#on_transfer_progress(&)","title":"<code>#on_transfer_progress</code>","text":""},{"location":"Grits/FetchOptions/#Grits::FetchOptions#on_update_tips(&)","title":"<code>#on_update_tips</code>","text":""},{"location":"Grits/FetchOptions/#Grits::FetchOptions#prune=(is_pruning)","title":"<code>#prune=(is_pruning : PruneOptions)</code>","text":""},{"location":"Grits/FetchOptions/#Grits::FetchOptions#update_fetchhead=(update)","title":"<code>#update_fetchhead=(update : Bool)</code>","text":""},{"location":"Grits/FetchOptions/PruneOptions/","title":"PruneOptions","text":""},{"location":"Grits/FetchOptions/PruneOptions/#Grits::FetchOptions::PruneOptions","title":"alias <code>Grits::FetchOptions::PruneOptions</code>","text":"Alias definition <code>LibGit::FetchPruneT</code>"},{"location":"Grits/FetchOptions/TagOptions/","title":"TagOptions","text":""},{"location":"Grits/FetchOptions/TagOptions/#Grits::FetchOptions::TagOptions","title":"alias <code>Grits::FetchOptions::TagOptions</code>","text":"Alias definition <code>LibGit::RemoteAutotagOptionT</code>"},{"location":"Grits/FileModeType/","title":"FileModeType","text":""},{"location":"Grits/FileModeType/#Grits::FileModeType","title":"alias <code>Grits::FileModeType</code>","text":"Alias definition <code>LibGit::FilemodeT</code>"},{"location":"Grits/HunkData/","title":"HunkData","text":""},{"location":"Grits/HunkData/#Grits::HunkData","title":"struct <code>Grits::HunkData</code> inherits <code>Struct</code>","text":""},{"location":"Grits/HunkData/#Grits::HunkData-constructors","title":"Constructors","text":""},{"location":"Grits/HunkData/#Grits::HunkData.new(new_lines,old_lines,new_start,old_start,header,delta)","title":"<code>.new(new_lines : Int32, old_lines : Int32, new_start : Int32, old_start : Int32, header : String, delta : DeltaData)</code>","text":""},{"location":"Grits/HunkData/#Grits::HunkData-methods","title":"Methods","text":""},{"location":"Grits/HunkData/#Grits::HunkData#clone","title":"<code>#clone</code>","text":""},{"location":"Grits/HunkData/#Grits::HunkData#copy_with(new_lines,old_lines,new_start,old_start,header,delta)","title":"<code>#copy_with(new_lines _new_lines = @new_lines, old_lines _old_lines = @old_lines, new_start _new_start = @new_start, old_start _old_start = @old_start, header _header = @header, delta _delta = @delta)</code>","text":""},{"location":"Grits/HunkData/#Grits::HunkData#delta","title":"<code>#delta : DeltaData</code>","text":""},{"location":"Grits/HunkData/#Grits::HunkData#header","title":"<code>#header : String</code>","text":""},{"location":"Grits/HunkData/#Grits::HunkData#new_lines","title":"<code>#new_lines : Int32</code>","text":""},{"location":"Grits/HunkData/#Grits::HunkData#new_start","title":"<code>#new_start : Int32</code>","text":""},{"location":"Grits/HunkData/#Grits::HunkData#old_lines","title":"<code>#old_lines : Int32</code>","text":""},{"location":"Grits/HunkData/#Grits::HunkData#old_start","title":"<code>#old_start : Int32</code>","text":""},{"location":"Grits/Index/","title":"Index","text":""},{"location":"Grits/Index/#Grits::Index","title":"class <code>Grits::Index</code> inherits <code>Reference</code>","text":"Included modules <code>Grits::Mixins::Pointable</code> <code>Grits::Mixins::Util</code>"},{"location":"Grits/Index/#Grits::Index-constructors","title":"Constructors","text":""},{"location":"Grits/Index/#Grits::Index.new(raw,repo)","title":"<code>.new(raw : LibGit::Index, repo : Grits::Repo)</code>","text":""},{"location":"Grits/Index/#Grits::Index-methods","title":"Methods","text":""},{"location":"Grits/Index/#Grits::Index#add(path)","title":"<code>#add(path : String) : Void</code>","text":""},{"location":"Grits/Index/#Grits::Index#add(paths,flags,&)","title":"<code>#add(paths : Array(String), flags : Array(IndexAddOption) = [] of IndexAddOption, \u00acification_callback : String, String -&gt; Bool | Nil)</code>","text":""},{"location":"Grits/Index/#Grits::Index#add_file(path)","title":"<code>#add_file(path : String) : Void</code>","text":""},{"location":"Grits/Index/#Grits::Index#add_files(path_expressions,flags,&)","title":"<code>#add_files(path_expressions : Array(String), flags : Array(IndexAddOption) = [] of IndexAddOption, \u00acification : String, String -&gt; Bool | Nil)</code>","text":""},{"location":"Grits/Index/#Grits::Index#clear","title":"<code>#clear : Nil</code>","text":""},{"location":"Grits/Index/#Grits::Index#diff_workdir(options)","title":"<code>#diff_workdir(options = DiffOptions.default) : Diff</code>","text":""},{"location":"Grits/Index/#Grits::Index#diff_workdir(options,&)","title":"<code>#diff_workdir(options = DiffOptions</code>","text":""},{"location":"Grits/Index/#Grits::Index#free","title":"<code>#free</code>","text":""},{"location":"Grits/Index/#Grits::Index#has_conflicts?","title":"<code>#has_conflicts? : Bool</code>","text":""},{"location":"Grits/Index/#Grits::Index#read_tree(tree)","title":"<code>#read_tree(tree : Tree)</code>","text":""},{"location":"Grits/Index/#Grits::Index#write","title":"<code>#write : Bool</code>","text":""},{"location":"Grits/Index/#Grits::Index#write_tree","title":"<code>#write_tree</code>","text":""},{"location":"Grits/Index/#Grits::Index#write_tree(&)","title":"<code>#write_tree</code>","text":""},{"location":"Grits/IndexAddOption/","title":"IndexAddOption","text":""},{"location":"Grits/IndexAddOption/#Grits::IndexAddOption","title":"alias <code>Grits::IndexAddOption</code>","text":"Alias definition <code>LibGit::IndexAddOptionT</code>"},{"location":"Grits/LineData/","title":"LineData","text":""},{"location":"Grits/LineData/#Grits::LineData","title":"struct <code>Grits::LineData</code> inherits <code>Struct</code>","text":""},{"location":"Grits/LineData/#Grits::LineData-constructors","title":"Constructors","text":""},{"location":"Grits/LineData/#Grits::LineData.new(origin,new_lineno,old_lineno,num_lines,content_offset,content,hunk)","title":"<code>.new(origin : Char, new_lineno : Int32, old_lineno : Int32, num_lines : Int64, content_offset : Int64, content : String, hunk : HunkData)</code>","text":""},{"location":"Grits/LineData/#Grits::LineData-methods","title":"Methods","text":""},{"location":"Grits/LineData/#Grits::LineData#clone","title":"<code>#clone</code>","text":""},{"location":"Grits/LineData/#Grits::LineData#content","title":"<code>#content : String</code>","text":""},{"location":"Grits/LineData/#Grits::LineData#content_offset","title":"<code>#content_offset : Int64</code>","text":""},{"location":"Grits/LineData/#Grits::LineData#copy_with(origin,new_lineno,old_lineno,num_lines,content_offset,content,hunk)","title":"<code>#copy_with(origin _origin = @origin, new_lineno _new_lineno = @new_lineno, old_lineno _old_lineno = @old_lineno, num_lines _num_lines = @num_lines, content_offset _content_offset = @content_offset, content _content = @content, hunk _hunk = @hunk)</code>","text":""},{"location":"Grits/LineData/#Grits::LineData#hunk","title":"<code>#hunk : HunkData</code>","text":""},{"location":"Grits/LineData/#Grits::LineData#new_lineno","title":"<code>#new_lineno : Int32</code>","text":""},{"location":"Grits/LineData/#Grits::LineData#num_lines","title":"<code>#num_lines : Int64</code>","text":""},{"location":"Grits/LineData/#Grits::LineData#old_lineno","title":"<code>#old_lineno : Int32</code>","text":""},{"location":"Grits/LineData/#Grits::LineData#origin","title":"<code>#origin : Char</code>","text":""},{"location":"Grits/Mixins/","title":"Mixins","text":""},{"location":"Grits/Mixins/#Grits::Mixins","title":"module <code>Grits::Mixins</code>","text":""},{"location":"Grits/Mixins/Callbacks/","title":"Callbacks","text":""},{"location":"Grits/Mixins/Callbacks/#Grits::Mixins::Callbacks","title":"module <code>Grits::Mixins::Callbacks</code>","text":"Direct including types <code>Grits::DiffIterator</code> <code>Grits::DiffOptions</code> <code>Grits::FetchOptions</code> <code>Grits::ProxyOptions</code> <code>Grits::Remotable::Callbacks</code> <code>Grits::TagIterator</code>"},{"location":"Grits/Mixins/Callbacks/#Grits::Mixins::Callbacks-methods","title":"Methods","text":""},{"location":"Grits/Mixins/Callbacks/#Grits::Mixins::Callbacks#add_callbacks","title":"abstract <code>#add_callbacks</code>","text":"<p>includer should make an method that </p>"},{"location":"Grits/Mixins/Callbacks/#Grits::Mixins::Callbacks-macros","title":"Macros","text":""},{"location":"Grits/Mixins/Callbacks/#Grits::Mixins::Callbacks:define_callback(method,block_type,var)","title":"<code>define_callback(method, block_type, var)</code>","text":""},{"location":"Grits/Mixins/Pointable/","title":"Pointable","text":""},{"location":"Grits/Mixins/Pointable/#Grits::Mixins::Pointable","title":"module <code>Grits::Mixins::Pointable</code>","text":"Direct including types <code>Grits::Buffer</code> <code>Grits::CheckoutOptions</code> <code>Grits::CloneOptions</code> <code>Grits::Commit</code> <code>Grits::Config</code> <code>Grits::Credential</code> <code>Grits::Diff</code> <code>Grits::DiffDelta</code> <code>Grits::DiffFile</code> <code>Grits::DiffOptions</code> <code>Grits::FetchOptions</code> <code>Grits::Index</code> <code>Grits::Object</code> <code>Grits::Odb</code> <code>Grits::Oid</code> <code>Grits::ProxyOptions</code> <code>Grits::Reference</code> <code>Grits::Remotable</code> <code>Grits::Remotable::Callbacks</code> <code>Grits::Remote</code> <code>Grits::Repo</code> <code>Grits::RepoInitOptions</code> <code>Grits::Signature</code> <code>Grits::Tag</code> <code>Grits::Tree</code> <code>Grits::Worktree</code> <code>Grits::Wrappers::PushUpdate</code>"},{"location":"Grits/Mixins/Repo/","title":"Repo","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo","title":"module <code>Grits::Mixins::Repo</code>","text":"Included modules <code>Grits::Mixins::Repository::Commit</code> <code>Grits::Mixins::Repository::Tag</code> <code>Grits::Mixins::Repository::Tree</code> Direct including types <code>Grits::Repo</code>"},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo-methods","title":"Methods","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#bare?","title":"<code>#bare?</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#checkout_head(options)","title":"<code>#checkout_head(options : CheckoutOptions = CheckoutOptions.default)</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#checkout_tree(object,options)","title":"<code>#checkout_tree(object : Grits::Object, options : CheckoutOptions = CheckoutOptions.default)</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#commondir","title":"<code>#commondir</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#config(snapshot,&)","title":"<code>#config(snapshot : Bool | Nil = false</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#configure_identity(name,email)","title":"<code>#configure_identity(name : String | Nil = nil, email : String | Nil = nil) : Nil</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#configured_identity","title":"<code>#configured_identity : Tuple(String | ::Nil, String | ::Nil)</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#create_branch(name,*,ref,force)","title":"<code>#create_branch(name : String, *, ref : String = \"HEAD\", force : Bool = false)</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#create_remote(name,url)","title":"<code>#create_remote(name : String, url : String)</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#create_remote(name,url,&)","title":"<code>#create_remote</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#create_remote_with_fetchspec(name,url,refspec)","title":"<code>#create_remote_with_fetchspec(name : String, url : String, refspec : String)</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#detach_head","title":"<code>#detach_head</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#diff_workdir(options)","title":"<code>#diff_workdir(options = DiffOptions.default) : Diff</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#diff_workdir(options,&)","title":"<code>#diff_workdir(options = DiffOptions</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#discover(start,across_fs,cieling_dirs)","title":"<code>#discover(start : String, across_fs : Bool = false, cieling_dirs : String = \"\") : String</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#each_fetchhead(&)","title":"<code>#each_fetchhead : Void</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#empty?","title":"<code>#empty?</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#hash_file(path,type,as_path)","title":"<code>#hash_file(path : String, type : Object::Type, as_path : String | Nil = nil)</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#head","title":"<code>#head</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#head?","title":"<code>#head?</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#head_detached?","title":"<code>#head_detached?</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#head_unborn?","title":"<code>#head_unborn?</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#item_path(item)","title":"<code>#item_path(item : Item)</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#lookup_commit(sha)","title":"<code>#lookup_commit(sha : String) : Commit</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#mirror_remote(name,url)","title":"<code>#mirror_remote(name : String, url : String)</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#namespace","title":"<code>#namespace : String | ::Nil</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#object_database(&)","title":"<code>#object_database</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#path","title":"<code>#path</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#remote(name)","title":"<code>#remote(name : String)</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#remotes","title":"<code>#remotes</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#remotes(&)","title":"<code>#remotes</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#revparse_single(text)","title":"<code>#revparse_single(text : String)</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#set_head(name)","title":"<code>#set_head(name : String)</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#shallow?","title":"<code>#shallow? : Bool</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#workdir","title":"<code>#workdir</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#worktree","title":"<code>#worktree</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#worktree(&)","title":"<code>#worktree</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#worktree?","title":"<code>#worktree?</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#worktree_head(worktree)","title":"<code>#worktree_head(worktree : String) : Reference | Nil</code>","text":""},{"location":"Grits/Mixins/Repo/#Grits::Mixins::Repo#worktree_head_detached?(worktree)","title":"<code>#worktree_head_detached?(worktree : String)</code>","text":""},{"location":"Grits/Mixins/Repo/EachFetchHeadCb/","title":"EachFetchHeadCb","text":""},{"location":"Grits/Mixins/Repo/EachFetchHeadCb/#Grits::Mixins::Repo::EachFetchHeadCb","title":"alias <code>Grits::Mixins::Repo::EachFetchHeadCb</code>","text":"Alias definition <code>String, String, Grits::Oid, Bool -&gt; Bool?</code>"},{"location":"Grits/Mixins/Repo/Item/","title":"Item","text":""},{"location":"Grits/Mixins/Repo/Item/#Grits::Mixins::Repo::Item","title":"alias <code>Grits::Mixins::Repo::Item</code>","text":"Alias definition <code>LibGit::RepositoryItemT</code>"},{"location":"Grits/Mixins/Repository/","title":"Repository","text":""},{"location":"Grits/Mixins/Repository/#Grits::Mixins::Repository","title":"module <code>Grits::Mixins::Repository</code>","text":""},{"location":"Grits/Mixins/Repository/Commit/","title":"Commit","text":""},{"location":"Grits/Mixins/Repository/Commit/#Grits::Mixins::Repository::Commit","title":"module <code>Grits::Mixins::Repository::Commit</code>","text":"Direct including types <code>Grits::Mixins::Repo</code>"},{"location":"Grits/Mixins/Repository/Commit/#Grits::Mixins::Repository::Commit-methods","title":"Methods","text":""},{"location":"Grits/Mixins/Repository/Commit/#Grits::Mixins::Repository::Commit#commit_at(reference,&)","title":"<code>#commit_at(reference, &amp; : Grits::Commit -&gt; )</code>","text":"<p>Todo</p> <p>validate that the returned ref actually points to a commit</p>"},{"location":"Grits/Mixins/Repository/Commit/#Grits::Mixins::Repository::Commit#commit_at_head(&)","title":"<code>#commit_at_head</code>","text":""},{"location":"Grits/Mixins/Repository/Commit/#Grits::Mixins::Repository::Commit#lookup_commit_by_oid(oid)","title":"<code>#lookup_commit_by_oid(oid : Grits::Oid) : Grits::Commit</code>","text":""},{"location":"Grits/Mixins/Repository/Commit/#Grits::Mixins::Repository::Commit#object_id_at(reference)","title":"<code>#object_id_at(reference) : Oid</code>","text":""},{"location":"Grits/Mixins/Repository/Tag/","title":"Tag","text":""},{"location":"Grits/Mixins/Repository/Tag/#Grits::Mixins::Repository::Tag","title":"module <code>Grits::Mixins::Repository::Tag</code>","text":"Direct including types <code>Grits::Mixins::Repo</code>"},{"location":"Grits/Mixins/Repository/Tag/#Grits::Mixins::Repository::Tag-methods","title":"Methods","text":""},{"location":"Grits/Mixins/Repository/Tag/#Grits::Mixins::Repository::Tag#each_tag(&)","title":"<code>#each_tag</code>","text":""},{"location":"Grits/Mixins/Repository/Tag/#Grits::Mixins::Repository::Tag#each_tag_info(&)","title":"<code>#each_tag_info</code>","text":""},{"location":"Grits/Mixins/Repository/Tag/#Grits::Mixins::Repository::Tag#tag_list","title":"<code>#tag_list : Array(String)</code>","text":""},{"location":"Grits/Mixins/Repository/Tag/#Grits::Mixins::Repository::Tag#tags","title":"<code>#tags</code>","text":""},{"location":"Grits/Mixins/Repository/Tree/","title":"Tree","text":""},{"location":"Grits/Mixins/Repository/Tree/#Grits::Mixins::Repository::Tree","title":"module <code>Grits::Mixins::Repository::Tree</code>","text":"Direct including types <code>Grits::Mixins::Repo</code>"},{"location":"Grits/Mixins/Repository/Tree/#Grits::Mixins::Repository::Tree-methods","title":"Methods","text":""},{"location":"Grits/Mixins/Repository/Tree/#Grits::Mixins::Repository::Tree#lookup_tree(sha)","title":"<code>#lookup_tree(sha : String)</code>","text":""},{"location":"Grits/Mixins/Repository/Tree/#Grits::Mixins::Repository::Tree#lookup_tree(oid)","title":"<code>#lookup_tree(oid : Oid)</code>","text":""},{"location":"Grits/Mixins/Repository/Tree/#Grits::Mixins::Repository::Tree#lookup_tree(sha,&)","title":"<code>#lookup_tree</code>","text":""},{"location":"Grits/Mixins/Repository/Tree/#Grits::Mixins::Repository::Tree#lookup_tree(oid,&)","title":"<code>#lookup_tree(oid : Oid</code>","text":""},{"location":"Grits/Mixins/Repository/Tree/#Grits::Mixins::Repository::Tree#tree_at(ref,&)","title":"<code>#tree_at</code>","text":""},{"location":"Grits/Mixins/Util/","title":"Util","text":""},{"location":"Grits/Mixins/Util/#Grits::Mixins::Util","title":"module <code>Grits::Mixins::Util</code>","text":"Direct including types <code>Grits::Index</code> <code>Grits::Mixins::Wrapper</code>"},{"location":"Grits/Mixins/Wrapper/","title":"Wrapper","text":""},{"location":"Grits/Mixins/Wrapper/#Grits::Mixins::Wrapper","title":"module <code>Grits::Mixins::Wrapper</code>","text":"Included modules <code>Grits::Mixins::Util</code> Direct including types <code>Grits::CheckoutOptions</code> <code>Grits::CloneOptions</code> <code>Grits::DiffBinary</code> <code>Grits::DiffBinaryFile</code> <code>Grits::DiffDelta</code> <code>Grits::DiffFile</code> <code>Grits::DiffHunk</code> <code>Grits::DiffLine</code> <code>Grits::DiffOptions</code> <code>Grits::FetchOptions</code> <code>Grits::Oid</code> <code>Grits::Reference</code> <code>Grits::Repo</code> <code>Grits::RepoInitOptions</code> <code>Grits::Wrappers::Certificate</code> <code>Grits::Wrappers::IndexerProgress</code> <code>Grits::Wrappers::PerformanceData</code>"},{"location":"Grits/Mixins/Wrapper/#Grits::Mixins::Wrapper-macros","title":"Macros","text":""},{"location":"Grits/Mixins/Wrapper/#Grits::Mixins::Wrapper:wrap(instance_var_name,method_name,create_accessor)","title":"<code>wrap(instance_var_name, method_name, create_accessor = false)</code>","text":""},{"location":"Grits/Mixins/Wrapper/#Grits::Mixins::Wrapper:wrap_value(instance_var_name,method_name,create_accessor)","title":"<code>wrap_value(instance_var_name, method_name, create_accessor = false)</code>","text":""},{"location":"Grits/Object/","title":"Object","text":""},{"location":"Grits/Object/#Grits::Object","title":"class <code>Grits::Object</code> inherits <code>Reference</code>","text":"Included modules <code>Grits::Mixins::Pointable</code>"},{"location":"Grits/Object/#Grits::Object-constructors","title":"Constructors","text":""},{"location":"Grits/Object/#Grits::Object.new(raw)","title":"<code>.new(raw : LibGit::Object)</code>","text":""},{"location":"Grits/Object/#Grits::Object-class-methods","title":"Class methods","text":""},{"location":"Grits/Object/#Grits::Object.lookup(repo,oid,type)","title":"<code>.lookup(repo : Repo, oid : Oid, type : Type)</code>","text":""},{"location":"Grits/Object/#Grits::Object-methods","title":"Methods","text":""},{"location":"Grits/Object/#Grits::Object#blob?","title":"<code>#blob?</code>","text":""},{"location":"Grits/Object/#Grits::Object#commit?","title":"<code>#commit?</code>","text":""},{"location":"Grits/Object/#Grits::Object#finalize","title":"<code>#finalize</code>","text":""},{"location":"Grits/Object/#Grits::Object#free","title":"<code>#free</code>","text":""},{"location":"Grits/Object/#Grits::Object#id","title":"<code>#id</code>","text":""},{"location":"Grits/Object/#Grits::Object#ofs_delta?","title":"<code>#ofs_delta?</code>","text":""},{"location":"Grits/Object/#Grits::Object#ref_delta?","title":"<code>#ref_delta?</code>","text":""},{"location":"Grits/Object/#Grits::Object#tag?","title":"<code>#tag?</code>","text":""},{"location":"Grits/Object/#Grits::Object#tree?","title":"<code>#tree?</code>","text":""},{"location":"Grits/Object/#Grits::Object#type","title":"<code>#type</code>","text":""},{"location":"Grits/Object/Type/","title":"Type","text":""},{"location":"Grits/Object/Type/#Grits::Object::Type","title":"alias <code>Grits::Object::Type</code>","text":"Alias definition <code>LibGit::OType</code>"},{"location":"Grits/Odb/","title":"Odb","text":""},{"location":"Grits/Odb/#Grits::Odb","title":"class <code>Grits::Odb</code> inherits <code>Reference</code>","text":"Included modules <code>Grits::Mixins::Pointable</code>"},{"location":"Grits/Odb/#Grits::Odb-constructors","title":"Constructors","text":""},{"location":"Grits/Odb/#Grits::Odb.new(raw)","title":"<code>.new(raw : LibGit::Odb)</code>","text":""},{"location":"Grits/Odb/#Grits::Odb-class-methods","title":"Class methods","text":""},{"location":"Grits/Odb/#Grits::Odb.from_repo(repo)","title":"<code>.from_repo(repo : Repo)</code>","text":""},{"location":"Grits/Odb/#Grits::Odb-methods","title":"Methods","text":""},{"location":"Grits/Odb/#Grits::Odb#free","title":"<code>#free</code>","text":""},{"location":"Grits/Oid/","title":"Oid","text":""},{"location":"Grits/Oid/#Grits::Oid","title":"class <code>Grits::Oid</code> inherits <code>Reference</code>","text":"Included modules <code>Grits::Mixins::Pointable</code> <code>Grits::Mixins::Wrapper</code>"},{"location":"Grits/Oid/#Grits::Oid-constructors","title":"Constructors","text":""},{"location":"Grits/Oid/#Grits::Oid.new(raw)","title":"<code>.new(raw : LibGit::Oid)</code>","text":""},{"location":"Grits/Oid/#Grits::Oid-class-methods","title":"Class methods","text":""},{"location":"Grits/Oid/#Grits::Oid.from_sha(sha)","title":"<code>.from_sha(sha : String)</code>","text":"<p>Fetch an Oid from a SHA hash</p> <p>If the SHA size is not equal to 40 chars this method will use <code>git_oid_fromstrn</code></p>"},{"location":"Grits/Oid/#Grits::Oid-methods","title":"Methods","text":""},{"location":"Grits/Oid/#Grits::Oid#object(repo,type)","title":"<code>#object(repo : Repo, type = Object::Type::Any)</code>","text":""},{"location":"Grits/Oid/#Grits::Oid#to_s(io)","title":"<code>#to_s(io)</code>","text":"<p>Return the SHA hash for this Oid</p>"},{"location":"Grits/OpenRepoType/","title":"OpenRepoType","text":""},{"location":"Grits/OpenRepoType/#Grits::OpenRepoType","title":"alias <code>Grits::OpenRepoType</code>","text":"Alias definition <code>LibGit::RepositoryTypes</code>"},{"location":"Grits/PerformanceDataCb/","title":"PerformanceDataCb","text":""},{"location":"Grits/PerformanceDataCb/#Grits::PerformanceDataCb","title":"alias <code>Grits::PerformanceDataCb</code>","text":"Alias definition <code>Grits::Wrappers::PerformanceData -&gt; Nil</code>"},{"location":"Grits/ProxyOptions/","title":"ProxyOptions","text":""},{"location":"Grits/ProxyOptions/#Grits::ProxyOptions","title":"struct <code>Grits::ProxyOptions</code> inherits <code>Struct</code>","text":"Included modules <code>Grits::Mixins::Callbacks</code> <code>Grits::Mixins::Pointable</code>"},{"location":"Grits/ProxyOptions/#Grits::ProxyOptions-constructors","title":"Constructors","text":""},{"location":"Grits/ProxyOptions/#Grits::ProxyOptions.new(raw,callbacks)","title":"<code>.new(raw : LibGit::ProxyOptions, callbacks : Grits::Remotable::Callbacks = Remotable::Callbacks.init)</code>","text":""},{"location":"Grits/ProxyOptions/#Grits::ProxyOptions-methods","title":"Methods","text":""},{"location":"Grits/ProxyOptions/#Grits::ProxyOptions#on_certificate_check(&)","title":"<code>#on_certificate_check</code>","text":""},{"location":"Grits/ProxyOptions/#Grits::ProxyOptions#on_credentials_acquire(&)","title":"<code>#on_credentials_acquire</code>","text":""},{"location":"Grits/ProxyOptions/#Grits::ProxyOptions#type=(t)","title":"<code>#type=(t : ProxyType)</code>","text":""},{"location":"Grits/ProxyOptions/#Grits::ProxyOptions#url=(url)","title":"<code>#url=(url)</code>","text":""},{"location":"Grits/ProxyOptions/ProxyType/","title":"ProxyType","text":""},{"location":"Grits/ProxyOptions/ProxyType/#Grits::ProxyOptions::ProxyType","title":"alias <code>Grits::ProxyOptions::ProxyType</code>","text":"Alias definition <code>LibGit::ProxyT</code>"},{"location":"Grits/RefType/","title":"RefType","text":""},{"location":"Grits/RefType/#Grits::RefType","title":"alias <code>Grits::RefType</code>","text":"Alias definition <code>LibGit::RefT</code>"},{"location":"Grits/Reference/","title":"Reference","text":""},{"location":"Grits/Reference/#Grits::Reference","title":"struct <code>Grits::Reference</code> inherits <code>Struct</code>","text":"Included modules <code>Grits::Mixins::Pointable</code> <code>Grits::Mixins::Wrapper</code>"},{"location":"Grits/Reference/#Grits::Reference-constructors","title":"Constructors","text":""},{"location":"Grits/Reference/#Grits::Reference.new(repo,raw)","title":"<code>.new(repo : Grits::Repo, raw : LibGit::Reference)</code>","text":""},{"location":"Grits/Reference/#Grits::Reference-class-methods","title":"Class methods","text":""},{"location":"Grits/Reference/#Grits::Reference.lookup(repo,name)","title":"<code>.lookup(repo : Repo, name : String)</code>","text":""},{"location":"Grits/Reference/#Grits::Reference.name_valid?(name)","title":"<code>.name_valid?(name)</code>","text":""},{"location":"Grits/Reference/#Grits::Reference-methods","title":"Methods","text":""},{"location":"Grits/Reference/#Grits::Reference#branch?","title":"<code>#branch?</code>","text":""},{"location":"Grits/Reference/#Grits::Reference#free","title":"<code>#free</code>","text":""},{"location":"Grits/Reference/#Grits::Reference#id","title":"<code>#id</code>","text":""},{"location":"Grits/Reference/#Grits::Reference#name","title":"<code>#name</code>","text":""},{"location":"Grits/Reference/#Grits::Reference#owner","title":"<code>#owner</code>","text":""},{"location":"Grits/Reference/#Grits::Reference#remote?","title":"<code>#remote?</code>","text":""},{"location":"Grits/Reference/#Grits::Reference#repo","title":"<code>#repo</code>","text":""},{"location":"Grits/Reference/#Grits::Reference#tag?","title":"<code>#tag?</code>","text":""},{"location":"Grits/Reference/#Grits::Reference#type","title":"<code>#type</code>","text":""},{"location":"Grits/Remotable/","title":"Remotable","text":""},{"location":"Grits/Remotable/#Grits::Remotable","title":"module <code>Grits::Remotable</code>","text":"Included modules <code>Grits::Mixins::Pointable</code>"},{"location":"Grits/Remotable/Callbacks/","title":"Callbacks","text":""},{"location":"Grits/Remotable/Callbacks/#Grits::Remotable::Callbacks","title":"struct <code>Grits::Remotable::Callbacks</code> inherits <code>Struct</code>","text":"Included modules <code>Grits::Mixins::Callbacks</code> <code>Grits::Mixins::Pointable</code>"},{"location":"Grits/Remotable/Callbacks/#Grits::Remotable::Callbacks-constructors","title":"Constructors","text":""},{"location":"Grits/Remotable/Callbacks/#Grits::Remotable::Callbacks.new(raw,callbacks_state)","title":"<code>.new(raw : LibGit::RemoteCallbacks, callbacks_state : Grits::Remotable::CallbacksState = CallbacksState.new)</code>","text":""},{"location":"Grits/Remotable/Callbacks/#Grits::Remotable::Callbacks-class-methods","title":"Class methods","text":""},{"location":"Grits/Remotable/Callbacks/#Grits::Remotable::Callbacks.init","title":"<code>.init</code>","text":""},{"location":"Grits/Remotable/Callbacks/#Grits::Remotable::Callbacks-methods","title":"Methods","text":""},{"location":"Grits/Remotable/Callbacks/#Grits::Remotable::Callbacks#empty?","title":"<code>#empty?</code>","text":""},{"location":"Grits/Remotable/Callbacks/#Grits::Remotable::Callbacks#on_certificate_check(&)","title":"<code>#on_certificate_check</code>","text":""},{"location":"Grits/Remotable/Callbacks/#Grits::Remotable::Callbacks#on_credentials_acquire(&)","title":"<code>#on_credentials_acquire</code>","text":""},{"location":"Grits/Remotable/Callbacks/#Grits::Remotable::Callbacks#on_pack_progress(&)","title":"<code>#on_pack_progress</code>","text":""},{"location":"Grits/Remotable/Callbacks/#Grits::Remotable::Callbacks#on_push_negotiation(&)","title":"<code>#on_push_negotiation</code>","text":""},{"location":"Grits/Remotable/Callbacks/#Grits::Remotable::Callbacks#on_push_progress(&)","title":"<code>#on_push_progress</code>","text":""},{"location":"Grits/Remotable/Callbacks/#Grits::Remotable::Callbacks#on_push_update_reference(&)","title":"<code>#on_push_update_reference</code>","text":""},{"location":"Grits/Remotable/Callbacks/#Grits::Remotable::Callbacks#on_resolve_url(&)","title":"<code>#on_resolve_url</code>","text":""},{"location":"Grits/Remotable/Callbacks/#Grits::Remotable::Callbacks#on_transfer_progress(&)","title":"<code>#on_transfer_progress</code>","text":""},{"location":"Grits/Remotable/Callbacks/#Grits::Remotable::Callbacks#on_update_tips(&)","title":"<code>#on_update_tips</code>","text":""},{"location":"Grits/Remotable/CallbacksState/","title":"CallbacksState","text":""},{"location":"Grits/Remotable/CallbacksState/#Grits::Remotable::CallbacksState","title":"class <code>Grits::Remotable::CallbacksState</code> inherits <code>Grits::CallbacksState</code>","text":""},{"location":"Grits/Remotable/CallbacksState/#Grits::Remotable::CallbacksState-methods","title":"Methods","text":""},{"location":"Grits/Remotable/CallbacksState/#Grits::Remotable::CallbacksState#on_certificate_check(&)","title":"<code>#on_certificate_check</code>","text":""},{"location":"Grits/Remotable/CallbacksState/#Grits::Remotable::CallbacksState#on_certificate_check","title":"<code>#on_certificate_check</code>","text":""},{"location":"Grits/Remotable/CallbacksState/#Grits::Remotable::CallbacksState#on_credentials_acquire(&)","title":"<code>#on_credentials_acquire</code>","text":""},{"location":"Grits/Remotable/CallbacksState/#Grits::Remotable::CallbacksState#on_credentials_acquire","title":"<code>#on_credentials_acquire</code>","text":""},{"location":"Grits/Remotable/CallbacksState/#Grits::Remotable::CallbacksState#on_pack_progress(&)","title":"<code>#on_pack_progress</code>","text":""},{"location":"Grits/Remotable/CallbacksState/#Grits::Remotable::CallbacksState#on_pack_progress","title":"<code>#on_pack_progress</code>","text":""},{"location":"Grits/Remotable/CallbacksState/#Grits::Remotable::CallbacksState#on_push_negotiation(&)","title":"<code>#on_push_negotiation</code>","text":""},{"location":"Grits/Remotable/CallbacksState/#Grits::Remotable::CallbacksState#on_push_negotiation","title":"<code>#on_push_negotiation</code>","text":""},{"location":"Grits/Remotable/CallbacksState/#Grits::Remotable::CallbacksState#on_push_progress(&)","title":"<code>#on_push_progress</code>","text":""},{"location":"Grits/Remotable/CallbacksState/#Grits::Remotable::CallbacksState#on_push_progress","title":"<code>#on_push_progress</code>","text":""},{"location":"Grits/Remotable/CallbacksState/#Grits::Remotable::CallbacksState#on_push_update_reference(&)","title":"<code>#on_push_update_reference</code>","text":""},{"location":"Grits/Remotable/CallbacksState/#Grits::Remotable::CallbacksState#on_push_update_reference","title":"<code>#on_push_update_reference</code>","text":""},{"location":"Grits/Remotable/CallbacksState/#Grits::Remotable::CallbacksState#on_resolve_url(&)","title":"<code>#on_resolve_url</code>","text":""},{"location":"Grits/Remotable/CallbacksState/#Grits::Remotable::CallbacksState#on_resolve_url","title":"<code>#on_resolve_url</code>","text":""},{"location":"Grits/Remotable/CallbacksState/#Grits::Remotable::CallbacksState#on_transfer_progress(&)","title":"<code>#on_transfer_progress</code>","text":""},{"location":"Grits/Remotable/CallbacksState/#Grits::Remotable::CallbacksState#on_transfer_progress","title":"<code>#on_transfer_progress</code>","text":""},{"location":"Grits/Remotable/CallbacksState/#Grits::Remotable::CallbacksState#on_update_tips(&)","title":"<code>#on_update_tips</code>","text":""},{"location":"Grits/Remotable/CallbacksState/#Grits::Remotable::CallbacksState#on_update_tips","title":"<code>#on_update_tips</code>","text":""},{"location":"Grits/Remotable/CertificateCheckCb/","title":"CertificateCheckCb","text":""},{"location":"Grits/Remotable/CertificateCheckCb/#Grits::Remotable::CertificateCheckCb","title":"alias <code>Grits::Remotable::CertificateCheckCb</code>","text":"Alias definition <code>Grits::Wrappers::Certificate, String, Bool -&gt; Bool?</code>"},{"location":"Grits/Remotable/CredentialsAcquireCb/","title":"CredentialsAcquireCb","text":""},{"location":"Grits/Remotable/CredentialsAcquireCb/#Grits::Remotable::CredentialsAcquireCb","title":"alias <code>Grits::Remotable::CredentialsAcquireCb</code>","text":"Alias definition <code>Grits::Credential -&gt; Int32</code>"},{"location":"Grits/Remotable/IndexerProgressCb/","title":"IndexerProgressCb","text":""},{"location":"Grits/Remotable/IndexerProgressCb/#Grits::Remotable::IndexerProgressCb","title":"alias <code>Grits::Remotable::IndexerProgressCb</code>","text":"Alias definition <code>Grits::Wrappers::IndexerProgress -&gt; Bool?</code>"},{"location":"Grits/Remotable/PackBuilderProgressCb/","title":"PackBuilderProgressCb","text":""},{"location":"Grits/Remotable/PackBuilderProgressCb/#Grits::Remotable::PackBuilderProgressCb","title":"alias <code>Grits::Remotable::PackBuilderProgressCb</code>","text":"Alias definition <code>Int32, UInt32, UInt32 -&gt; Nil</code>"},{"location":"Grits/Remotable/PushNegotiation/","title":"PushNegotiation","text":""},{"location":"Grits/Remotable/PushNegotiation/#Grits::Remotable::PushNegotiation","title":"alias <code>Grits::Remotable::PushNegotiation</code>","text":"Alias definition <code>Grits::Wrappers::PushUpdate, UInt64 -&gt; Nil</code>"},{"location":"Grits/Remotable/PushTransferProgressCb/","title":"PushTransferProgressCb","text":""},{"location":"Grits/Remotable/PushTransferProgressCb/#Grits::Remotable::PushTransferProgressCb","title":"alias <code>Grits::Remotable::PushTransferProgressCb</code>","text":"Alias definition <code>UInt32, UInt32, UInt64 -&gt; Nil</code>"},{"location":"Grits/Remotable/PushUpdateReferenceCb/","title":"PushUpdateReferenceCb","text":""},{"location":"Grits/Remotable/PushUpdateReferenceCb/#Grits::Remotable::PushUpdateReferenceCb","title":"alias <code>Grits::Remotable::PushUpdateReferenceCb</code>","text":"Alias definition <code>String, String -&gt; Bool?</code>"},{"location":"Grits/Remotable/ResolveUrlCb/","title":"ResolveUrlCb","text":""},{"location":"Grits/Remotable/ResolveUrlCb/#Grits::Remotable::ResolveUrlCb","title":"alias <code>Grits::Remotable::ResolveUrlCb</code>","text":"Alias definition <code>Grits::Remotable::UrlResolver -&gt; Int32?</code>"},{"location":"Grits/Remotable/UpdateTipsCb/","title":"UpdateTipsCb","text":""},{"location":"Grits/Remotable/UpdateTipsCb/#Grits::Remotable::UpdateTipsCb","title":"alias <code>Grits::Remotable::UpdateTipsCb</code>","text":"<p>these may return things that affect the remotable instead of Void (no docs)</p>  Alias definition <code>String, Grits::Oid, Grits::Oid -&gt; Nil</code>"},{"location":"Grits/Remotable/UrlResolver/","title":"UrlResolver","text":""},{"location":"Grits/Remotable/UrlResolver/#Grits::Remotable::UrlResolver","title":"struct <code>Grits::Remotable::UrlResolver</code> inherits <code>Struct</code>","text":""},{"location":"Grits/Remotable/UrlResolver/#Grits::Remotable::UrlResolver-constructors","title":"Constructors","text":""},{"location":"Grits/Remotable/UrlResolver/#Grits::Remotable::UrlResolver.new(buffer,url,direction)","title":"<code>.new(buffer : Pointer(LibGit::Buf), url : Pointer(LibC::Char), direction : LibC::Int)</code>","text":""},{"location":"Grits/Remotable/UrlResolver/#Grits::Remotable::UrlResolver-methods","title":"Methods","text":""},{"location":"Grits/Remotable/UrlResolver/#Grits::Remotable::UrlResolver#direction","title":"<code>#direction</code>","text":""},{"location":"Grits/Remotable/UrlResolver/#Grits::Remotable::UrlResolver#fetch?","title":"<code>#fetch?</code>","text":""},{"location":"Grits/Remotable/UrlResolver/#Grits::Remotable::UrlResolver#push?","title":"<code>#push?</code>","text":""},{"location":"Grits/Remotable/UrlResolver/#Grits::Remotable::UrlResolver#set(new_url)","title":"<code>#set(new_url : String)</code>","text":""},{"location":"Grits/Remotable/UrlResolver/#Grits::Remotable::UrlResolver#url","title":"<code>#url</code>","text":""},{"location":"Grits/Remote/","title":"Remote","text":""},{"location":"Grits/Remote/#Grits::Remote","title":"class <code>Grits::Remote</code> inherits <code>Reference</code>","text":"Included modules <code>Grits::Mixins::Pointable</code>"},{"location":"Grits/Remote/#Grits::Remote-constructors","title":"Constructors","text":""},{"location":"Grits/Remote/#Grits::Remote.new(raw)","title":"<code>.new(raw : LibGit::Remote)</code>","text":""},{"location":"Grits/Remote/#Grits::Remote-class-methods","title":"Class methods","text":""},{"location":"Grits/Remote/#Grits::Remote.create(repo,name,url)","title":"<code>.create(repo : Repo, name : String, url : String)</code>","text":""},{"location":"Grits/Remote/#Grits::Remote-methods","title":"Methods","text":""},{"location":"Grits/Remote/#Grits::Remote#fetch(refs,options,reflog_message)","title":"<code>#fetch(refs : Array(String | Nil) = [] of String | ::Nil, options : FetchOptions | Nil = FetchOptions.default, reflog_message : String | Nil = nil)</code>","text":""},{"location":"Grits/Remote/#Grits::Remote#name","title":"<code>#name</code>","text":""},{"location":"Grits/Remote/#Grits::Remote#refspecs","title":"<code>#refspecs : Array(String)</code>","text":""},{"location":"Grits/Remote/#Grits::Remote#update_tips!(callbacks,update_fetchhead,download_tags,reflog_message)","title":"<code>#update_tips!(callbacks : Remotable::Callbacks | Nil = Remotable::Callbacks.init, update_fetchhead : Bool | Nil = true, download_tags : TagStrategy | Nil = TagStrategy::DownloadTagsAuto, reflog_message : String | Nil = nil)</code>","text":""},{"location":"Grits/Remote/#Grits::Remote#url","title":"<code>#url</code>","text":""},{"location":"Grits/Remote/TagStrategy/","title":"TagStrategy","text":""},{"location":"Grits/Remote/TagStrategy/#Grits::Remote::TagStrategy","title":"alias <code>Grits::Remote::TagStrategy</code>","text":"Alias definition <code>LibGit::RemoteAutoTagOptionT</code>"},{"location":"Grits/RemoteCreateCb/","title":"RemoteCreateCb","text":""},{"location":"Grits/RemoteCreateCb/#Grits::RemoteCreateCb","title":"alias <code>Grits::RemoteCreateCb</code>","text":"Alias definition <code>Grits::Repo, String, String -&gt; Grits::Remote</code>"},{"location":"Grits/Repo/","title":"Repo","text":""},{"location":"Grits/Repo/#Grits::Repo","title":"class <code>Grits::Repo</code> inherits <code>Reference</code>","text":"Included modules <code>Grits::Mixins::Pointable</code> <code>Grits::Mixins::Repo</code> <code>Grits::Mixins::Wrapper</code>"},{"location":"Grits/Repo/#Grits::Repo-constructors","title":"Constructors","text":""},{"location":"Grits/Repo/#Grits::Repo.new(raw)","title":"<code>.new(raw : LibGit::Repository)</code>","text":""},{"location":"Grits/Repo/#Grits::Repo-class-methods","title":"Class methods","text":""},{"location":"Grits/Repo/#Grits::Repo.clone(url,local_path,options)","title":"<code>.clone(url : String, local_path : String = Dir.cwd, options : CloneOptions = CloneOptions.default)</code>","text":""},{"location":"Grits/Repo/#Grits::Repo.clone(*,&)","title":"<code>.clone</code>","text":""},{"location":"Grits/Repo/#Grits::Repo.clone_mirror(url,path,options,&)","title":"<code>.clone_mirror(url : String, path : String = Dir.cwd, options : CloneOptions = CloneOptions</code>","text":""},{"location":"Grits/Repo/#Grits::Repo.init(path,*,bare,make,mode,bare_int)","title":"<code>.init(path : String, *, bare : Bool | Nil = false, make : Bool | Nil = false, mode : Int | Nil = 511, bare_int : UInt32 = (bare ? 1 : 0).to_u)</code>","text":""},{"location":"Grits/Repo/#Grits::Repo.init(path,**,&)","title":"<code>.init(path : String, **args, &amp;) : Void</code>","text":""},{"location":"Grits/Repo/#Grits::Repo.init_ext(path,*,make,mode,options)","title":"<code>.init_ext(path : String, *, make : Bool | Nil = false, mode : Int | Nil = 511, options : RepoInitOptions = RepoInitOptions.default)</code>","text":""},{"location":"Grits/Repo/#Grits::Repo.init_ext(path,**,&)","title":"<code>.init_ext</code>","text":""},{"location":"Grits/Repo/#Grits::Repo.open(path)","title":"<code>.open(path : String)</code>","text":""},{"location":"Grits/Repo/#Grits::Repo.open(*,&)","title":"<code>.open</code>","text":""},{"location":"Grits/Repo/#Grits::Repo.open_bare(path)","title":"<code>.open_bare(path : String)</code>","text":""},{"location":"Grits/Repo/#Grits::Repo.open_bare(path,&)","title":"<code>.open_bare</code>","text":""},{"location":"Grits/Repo/#Grits::Repo.open_ext(path,flags,ceiling_dirs)","title":"<code>.open_ext(path : String, flags : Array(Grits::OpenRepoType) = [OpenFlags::None], ceiling_dirs : String = \"\")</code>","text":""},{"location":"Grits/Repo/#Grits::Repo.open_ext(path,**,&)","title":"<code>.open_ext</code>","text":""},{"location":"Grits/Repo/#Grits::Repo-methods","title":"Methods","text":""},{"location":"Grits/Repo/#Grits::Repo#free","title":"<code>#free</code>","text":""},{"location":"Grits/Repo/#Grits::Repo#index","title":"<code>#index</code>","text":""},{"location":"Grits/Repo/#Grits::Repo#index(&)","title":"<code>#index</code>","text":""},{"location":"Grits/Repo/#Grits::Repo#write_tree(&)","title":"<code>#write_tree</code>","text":""},{"location":"Grits/RepoInitOptions/","title":"RepoInitOptions","text":""},{"location":"Grits/RepoInitOptions/#Grits::RepoInitOptions","title":"class <code>Grits::RepoInitOptions</code> inherits <code>Reference</code>","text":"Included modules <code>Grits::Mixins::Pointable</code> <code>Grits::Mixins::Wrapper</code>"},{"location":"Grits/RepoInitOptions/#Grits::RepoInitOptions-constructors","title":"Constructors","text":""},{"location":"Grits/RepoInitOptions/#Grits::RepoInitOptions.new(raw)","title":"<code>.new(raw : LibGit::RepositoryInitOptions)</code>","text":""},{"location":"Grits/RepoInitOptions/#Grits::RepoInitOptions-class-methods","title":"Class methods","text":""},{"location":"Grits/RepoInitOptions/#Grits::RepoInitOptions.default","title":"<code>.default</code>","text":""},{"location":"Grits/RepoInitOptions/#Grits::RepoInitOptions-methods","title":"Methods","text":""},{"location":"Grits/RepoInitOptions/#Grits::RepoInitOptions#description","title":"<code>#description</code>","text":""},{"location":"Grits/RepoInitOptions/#Grits::RepoInitOptions#description=(value)","title":"<code>#description=(value)</code>","text":""},{"location":"Grits/RepoInitOptions/#Grits::RepoInitOptions#flags","title":"<code>#flags</code>","text":""},{"location":"Grits/RepoInitOptions/#Grits::RepoInitOptions#flags=(value)","title":"<code>#flags=(value)</code>","text":""},{"location":"Grits/RepoInitOptions/#Grits::RepoInitOptions#initial_head","title":"<code>#initial_head</code>","text":""},{"location":"Grits/RepoInitOptions/#Grits::RepoInitOptions#initial_head=(value)","title":"<code>#initial_head=(value)</code>","text":""},{"location":"Grits/RepoInitOptions/#Grits::RepoInitOptions#mode","title":"<code>#mode</code>","text":""},{"location":"Grits/RepoInitOptions/#Grits::RepoInitOptions#mode=(value)","title":"<code>#mode=(value)</code>","text":""},{"location":"Grits/RepoInitOptions/#Grits::RepoInitOptions#origin_url","title":"<code>#origin_url</code>","text":""},{"location":"Grits/RepoInitOptions/#Grits::RepoInitOptions#origin_url=(value)","title":"<code>#origin_url=(value)</code>","text":""},{"location":"Grits/RepoInitOptions/#Grits::RepoInitOptions#template_path","title":"<code>#template_path</code>","text":""},{"location":"Grits/RepoInitOptions/#Grits::RepoInitOptions#template_path=(value)","title":"<code>#template_path=(value)</code>","text":""},{"location":"Grits/RepoInitOptions/#Grits::RepoInitOptions#version","title":"<code>#version</code>","text":""},{"location":"Grits/RepoInitOptions/#Grits::RepoInitOptions#version=(value)","title":"<code>#version=(value)</code>","text":""},{"location":"Grits/RepoInitOptions/#Grits::RepoInitOptions#workdir_path","title":"<code>#workdir_path</code>","text":""},{"location":"Grits/RepoInitOptions/#Grits::RepoInitOptions#workdir_path=(value)","title":"<code>#workdir_path=(value)</code>","text":""},{"location":"Grits/RepositoryCreateCb/","title":"RepositoryCreateCb","text":""},{"location":"Grits/RepositoryCreateCb/#Grits::RepositoryCreateCb","title":"alias <code>Grits::RepositoryCreateCb</code>","text":"Alias definition <code>String, Bool -&gt; Grits::Repo</code>"},{"location":"Grits/Signature/","title":"Signature","text":""},{"location":"Grits/Signature/#Grits::Signature","title":"class <code>Grits::Signature</code> inherits <code>Reference</code>","text":"Included modules <code>Grits::Mixins::Pointable</code>"},{"location":"Grits/Signature/#Grits::Signature-constructors","title":"Constructors","text":""},{"location":"Grits/Signature/#Grits::Signature.new(raw)","title":"<code>.new(raw : Pointer(LibGit::Signature))</code>","text":""},{"location":"Grits/Signature/#Grits::Signature-class-methods","title":"Class methods","text":""},{"location":"Grits/Signature/#Grits::Signature.from_tuple(tuple)","title":"<code>.from_tuple(tuple : Commit::SignatureTuple)</code>","text":""},{"location":"Grits/Signature/#Grits::Signature.make(name,email,time)","title":"<code>.make(name : String, email : String, time : Time)</code>","text":""},{"location":"Grits/Signature/#Grits::Signature.now(name,email)","title":"<code>.now(name : String, email : String)</code>","text":""},{"location":"Grits/Signature/#Grits::Signature-methods","title":"Methods","text":""},{"location":"Grits/Signature/#Grits::Signature#data","title":"<code>#data</code>","text":""},{"location":"Grits/Signature/#Grits::Signature#email","title":"<code>#email</code>","text":""},{"location":"Grits/Signature/#Grits::Signature#free","title":"<code>#free</code>","text":""},{"location":"Grits/Signature/#Grits::Signature#name","title":"<code>#name</code>","text":""},{"location":"Grits/Signature/#Grits::Signature#time","title":"<code>#time</code>","text":""},{"location":"Grits/SignatureData/","title":"SignatureData","text":""},{"location":"Grits/SignatureData/#Grits::SignatureData","title":"struct <code>Grits::SignatureData</code> inherits <code>Struct</code>","text":""},{"location":"Grits/SignatureData/#Grits::SignatureData-constructors","title":"Constructors","text":""},{"location":"Grits/SignatureData/#Grits::SignatureData.new(name,email,time)","title":"<code>.new(name : String, email : String, time : Time)</code>","text":""},{"location":"Grits/SignatureData/#Grits::SignatureData-methods","title":"Methods","text":""},{"location":"Grits/SignatureData/#Grits::SignatureData#clone","title":"<code>#clone</code>","text":""},{"location":"Grits/SignatureData/#Grits::SignatureData#copy_with(name,email,time)","title":"<code>#copy_with(name _name = @name, email _email = @email, time _time = @time)</code>","text":""},{"location":"Grits/SignatureData/#Grits::SignatureData#email","title":"<code>#email : String</code>","text":""},{"location":"Grits/SignatureData/#Grits::SignatureData#name","title":"<code>#name : String</code>","text":""},{"location":"Grits/SignatureData/#Grits::SignatureData#time","title":"<code>#time : Time</code>","text":""},{"location":"Grits/Tag/","title":"Tag","text":""},{"location":"Grits/Tag/#Grits::Tag","title":"class <code>Grits::Tag</code> inherits <code>Reference</code>","text":"Included modules <code>Grits::Mixins::Pointable</code>"},{"location":"Grits/Tag/#Grits::Tag-constructors","title":"Constructors","text":""},{"location":"Grits/Tag/#Grits::Tag.new(repo,raw)","title":"<code>.new(repo : Grits::Repo, raw : LibGit::Tag)</code>","text":""},{"location":"Grits/Tag/#Grits::Tag-class-methods","title":"Class methods","text":""},{"location":"Grits/Tag/#Grits::Tag.lookup(repo,oid,*,name)","title":"<code>.lookup(repo : Grits::Repo, oid : Grits::Oid, *, name : String | Nil = nil)</code>","text":""},{"location":"Grits/Tag/#Grits::Tag.valid_name?(name)","title":"<code>.valid_name?(name : String) : Bool</code>","text":""},{"location":"Grits/Tag/#Grits::Tag-methods","title":"Methods","text":""},{"location":"Grits/Tag/#Grits::Tag#data","title":"<code>#data</code>","text":""},{"location":"Grits/Tag/#Grits::Tag#delete","title":"<code>#delete</code>","text":""},{"location":"Grits/Tag/#Grits::Tag#free","title":"<code>#free</code>","text":""},{"location":"Grits/Tag/#Grits::Tag#id","title":"<code>#id</code>","text":""},{"location":"Grits/Tag/#Grits::Tag#message","title":"<code>#message</code>","text":""},{"location":"Grits/Tag/#Grits::Tag#name","title":"<code>#name</code>","text":""},{"location":"Grits/TagData/","title":"TagData","text":""},{"location":"Grits/TagData/#Grits::TagData","title":"struct <code>Grits::TagData</code> inherits <code>Struct</code>","text":""},{"location":"Grits/TagData/#Grits::TagData-constructors","title":"Constructors","text":""},{"location":"Grits/TagData/#Grits::TagData.new(name,sha,message)","title":"<code>.new(name : String, sha : String, message : String)</code>","text":""},{"location":"Grits/TagData/#Grits::TagData-methods","title":"Methods","text":""},{"location":"Grits/TagData/#Grits::TagData#clone","title":"<code>#clone</code>","text":""},{"location":"Grits/TagData/#Grits::TagData#copy_with(name,sha,message)","title":"<code>#copy_with(name _name = @name, sha _sha = @sha, message _message = @message)</code>","text":""},{"location":"Grits/TagData/#Grits::TagData#message","title":"<code>#message : String</code>","text":""},{"location":"Grits/TagData/#Grits::TagData#name","title":"<code>#name : String</code>","text":""},{"location":"Grits/TagData/#Grits::TagData#sha","title":"<code>#sha : String</code>","text":""},{"location":"Grits/TagForeachCallbacks/","title":"TagForeachCallbacks","text":""},{"location":"Grits/TagForeachCallbacks/#Grits::TagForeachCallbacks","title":"class <code>Grits::TagForeachCallbacks</code> inherits <code>Grits::CallbacksState</code>","text":""},{"location":"Grits/TagForeachCallbacks/#Grits::TagForeachCallbacks-methods","title":"Methods","text":""},{"location":"Grits/TagForeachCallbacks/#Grits::TagForeachCallbacks#on_tag_info(&)","title":"<code>#on_tag_info</code>","text":""},{"location":"Grits/TagForeachCallbacks/#Grits::TagForeachCallbacks#on_tag_info","title":"<code>#on_tag_info</code>","text":""},{"location":"Grits/TagInfo/","title":"TagInfo","text":""},{"location":"Grits/TagInfo/#Grits::TagInfo","title":"struct <code>Grits::TagInfo</code> inherits <code>Struct</code>","text":""},{"location":"Grits/TagInfo/#Grits::TagInfo-constructors","title":"Constructors","text":""},{"location":"Grits/TagInfo/#Grits::TagInfo.new(repo,name,oid)","title":"<code>.new(repo : Repo, name : String, oid : Grits::Oid)</code>","text":""},{"location":"Grits/TagInfo/#Grits::TagInfo-methods","title":"Methods","text":""},{"location":"Grits/TagInfo/#Grits::TagInfo#annotated?","title":"<code>#annotated?</code>","text":""},{"location":"Grits/TagInfo/#Grits::TagInfo#as_commit(&)","title":"<code>#as_commit</code>","text":""},{"location":"Grits/TagInfo/#Grits::TagInfo#as_tag(&)","title":"<code>#as_tag</code>","text":""},{"location":"Grits/TagInfo/#Grits::TagInfo#as_tree(&)","title":"<code>#as_tree</code>","text":""},{"location":"Grits/TagInfo/#Grits::TagInfo#lightweight?","title":"<code>#lightweight?</code>","text":""},{"location":"Grits/TagInfo/#Grits::TagInfo#name","title":"<code>#name</code>","text":""},{"location":"Grits/TagInfo/#Grits::TagInfo#oid","title":"<code>#oid</code>","text":""},{"location":"Grits/TagInfo/#Grits::TagInfo#repo","title":"<code>#repo</code>","text":""},{"location":"Grits/TagInfo/#Grits::TagInfo#resolve(&)","title":"<code>#resolve</code>","text":""},{"location":"Grits/TagInfo/#Grits::TagInfo#tree?","title":"<code>#tree?</code>","text":""},{"location":"Grits/TagInfo/#Grits::TagInfo#valid?","title":"<code>#valid?</code>","text":""},{"location":"Grits/TagIterator/","title":"TagIterator","text":""},{"location":"Grits/TagIterator/#Grits::TagIterator","title":"struct <code>Grits::TagIterator</code> inherits <code>Struct</code>","text":"Included modules <code>Grits::Mixins::Callbacks</code>"},{"location":"Grits/TagIterator/#Grits::TagIterator-constructors","title":"Constructors","text":""},{"location":"Grits/TagIterator/#Grits::TagIterator.new","title":"<code>.new</code>","text":""},{"location":"Grits/TagIterator/#Grits::TagIterator-methods","title":"Methods","text":""},{"location":"Grits/TagIterator/#Grits::TagIterator#execute(repo)","title":"<code>#execute(repo : Grits::Repo)</code>","text":""},{"location":"Grits/TagIterator/#Grits::TagIterator#initialize","title":"<code>#initialize</code>","text":""},{"location":"Grits/TagIterator/#Grits::TagIterator#on_tag_info(&)","title":"<code>#on_tag_info</code>","text":""},{"location":"Grits/Tree/","title":"Tree","text":""},{"location":"Grits/Tree/#Grits::Tree","title":"class <code>Grits::Tree</code> inherits <code>Reference</code>","text":"Included modules <code>Grits::Mixins::Pointable</code>"},{"location":"Grits/Tree/#Grits::Tree-constructors","title":"Constructors","text":""},{"location":"Grits/Tree/#Grits::Tree.new(raw,repo)","title":"<code>.new(raw : LibGit::Tree, repo : Repo)</code>","text":""},{"location":"Grits/Tree/#Grits::Tree-class-methods","title":"Class methods","text":""},{"location":"Grits/Tree/#Grits::Tree.from_commit(commit)","title":"<code>.from_commit(commit : Grits::Commit)</code>","text":""},{"location":"Grits/Tree/#Grits::Tree.lookup(repo,oid)","title":"<code>.lookup(repo : Grits::Repo, oid)</code>","text":""},{"location":"Grits/Tree/#Grits::Tree-methods","title":"Methods","text":""},{"location":"Grits/Tree/#Grits::Tree#commit(*,message,author,committer,encoding,parents,update_ref,&)","title":"<code>#commit(*, message : String, author : Commit::SignatureTuple, committer : Commit::SignatureTuple, encoding : String = \"UTF-8\", parents : Array(Commit), update_ref : String | Reference</code>","text":""},{"location":"Grits/Tree/#Grits::Tree#data","title":"<code>#data</code>","text":""},{"location":"Grits/Tree/#Grits::Tree#diff_workdir(options,&)","title":"<code>#diff_workdir(options = DiffOptions</code>","text":""},{"location":"Grits/Tree/#Grits::Tree#free","title":"<code>#free</code>","text":""},{"location":"Grits/Tree/#Grits::Tree#id","title":"<code>#id : Oid</code>","text":""},{"location":"Grits/Tree/#Grits::Tree#repo","title":"<code>#repo</code>","text":""},{"location":"Grits/TreeData/","title":"TreeData","text":""},{"location":"Grits/TreeData/#Grits::TreeData","title":"struct <code>Grits::TreeData</code> inherits <code>Struct</code>","text":""},{"location":"Grits/TreeData/#Grits::TreeData-constructors","title":"Constructors","text":""},{"location":"Grits/TreeData/#Grits::TreeData.new(sha)","title":"<code>.new(sha : String)</code>","text":""},{"location":"Grits/TreeData/#Grits::TreeData-methods","title":"Methods","text":""},{"location":"Grits/TreeData/#Grits::TreeData#clone","title":"<code>#clone</code>","text":""},{"location":"Grits/TreeData/#Grits::TreeData#copy_with(sha)","title":"<code>#copy_with(sha _sha = @sha)</code>","text":""},{"location":"Grits/TreeData/#Grits::TreeData#sha","title":"<code>#sha : String</code>","text":""},{"location":"Grits/Worktree/","title":"Worktree","text":""},{"location":"Grits/Worktree/#Grits::Worktree","title":"struct <code>Grits::Worktree</code> inherits <code>Struct</code>","text":"Included modules <code>Grits::Mixins::Pointable</code>"},{"location":"Grits/Worktree/#Grits::Worktree-constructors","title":"Constructors","text":""},{"location":"Grits/Worktree/#Grits::Worktree.new(raw,repo)","title":"<code>.new(raw : LibGit::Worktree, repo : Repo)</code>","text":""},{"location":"Grits/Worktree/#Grits::Worktree-methods","title":"Methods","text":""},{"location":"Grits/Worktree/#Grits::Worktree#free","title":"<code>#free</code>","text":""},{"location":"Grits/Worktree/#Grits::Worktree#repo","title":"<code>#repo</code>","text":""},{"location":"Grits/Worktree/#Grits::Worktree#valid?","title":"<code>#valid? : Bool</code>","text":""},{"location":"Grits/Worktree/#Grits::Worktree#validate!","title":"<code>#validate!</code>","text":""},{"location":"Grits/Wrappers/","title":"Wrappers","text":""},{"location":"Grits/Wrappers/#Grits::Wrappers","title":"module <code>Grits::Wrappers</code>","text":""},{"location":"Grits/Wrappers/Certificate/","title":"Certificate","text":""},{"location":"Grits/Wrappers/Certificate/#Grits::Wrappers::Certificate","title":"class <code>Grits::Wrappers::Certificate</code> inherits <code>Reference</code>","text":"Included modules <code>Grits::Mixins::Wrapper</code>"},{"location":"Grits/Wrappers/Certificate/#Grits::Wrappers::Certificate-constructors","title":"Constructors","text":""},{"location":"Grits/Wrappers/Certificate/#Grits::Wrappers::Certificate.new(cert)","title":"<code>.new(cert : Pointer(LibGit::GitCert))</code>","text":""},{"location":"Grits/Wrappers/Certificate/#Grits::Wrappers::Certificate-methods","title":"Methods","text":""},{"location":"Grits/Wrappers/Certificate/#Grits::Wrappers::Certificate#cert_type","title":"<code>#cert_type</code>","text":""},{"location":"Grits/Wrappers/IndexerProgress/","title":"IndexerProgress","text":""},{"location":"Grits/Wrappers/IndexerProgress/#Grits::Wrappers::IndexerProgress","title":"class <code>Grits::Wrappers::IndexerProgress</code> inherits <code>Reference</code>","text":"Included modules <code>Grits::Mixins::Wrapper</code>"},{"location":"Grits/Wrappers/IndexerProgress/#Grits::Wrappers::IndexerProgress-constructors","title":"Constructors","text":""},{"location":"Grits/Wrappers/IndexerProgress/#Grits::Wrappers::IndexerProgress.new(indexer)","title":"<code>.new(indexer : Pointer(LibGit::IndexerProgress))</code>","text":""},{"location":"Grits/Wrappers/IndexerProgress/#Grits::Wrappers::IndexerProgress-methods","title":"Methods","text":""},{"location":"Grits/Wrappers/IndexerProgress/#Grits::Wrappers::IndexerProgress#indexed_deltas","title":"<code>#indexed_deltas</code>","text":""},{"location":"Grits/Wrappers/IndexerProgress/#Grits::Wrappers::IndexerProgress#indexed_objects","title":"<code>#indexed_objects</code>","text":""},{"location":"Grits/Wrappers/IndexerProgress/#Grits::Wrappers::IndexerProgress#local_objects","title":"<code>#local_objects</code>","text":""},{"location":"Grits/Wrappers/IndexerProgress/#Grits::Wrappers::IndexerProgress#percent_deltas_indexed","title":"<code>#percent_deltas_indexed</code>","text":""},{"location":"Grits/Wrappers/IndexerProgress/#Grits::Wrappers::IndexerProgress#percent_objects_downloaded","title":"<code>#percent_objects_downloaded</code>","text":""},{"location":"Grits/Wrappers/IndexerProgress/#Grits::Wrappers::IndexerProgress#percent_objects_indexed","title":"<code>#percent_objects_indexed</code>","text":""},{"location":"Grits/Wrappers/IndexerProgress/#Grits::Wrappers::IndexerProgress#recieved_bytes","title":"<code>#recieved_bytes</code>","text":""},{"location":"Grits/Wrappers/IndexerProgress/#Grits::Wrappers::IndexerProgress#recieved_objects","title":"<code>#recieved_objects</code>","text":""},{"location":"Grits/Wrappers/IndexerProgress/#Grits::Wrappers::IndexerProgress#total_deltas","title":"<code>#total_deltas</code>","text":""},{"location":"Grits/Wrappers/IndexerProgress/#Grits::Wrappers::IndexerProgress#total_objects","title":"<code>#total_objects</code>","text":""},{"location":"Grits/Wrappers/PerformanceData/","title":"PerformanceData","text":""},{"location":"Grits/Wrappers/PerformanceData/#Grits::Wrappers::PerformanceData","title":"struct <code>Grits::Wrappers::PerformanceData</code> inherits <code>Struct</code>","text":"Included modules <code>Grits::Mixins::Wrapper</code>"},{"location":"Grits/Wrappers/PerformanceData/#Grits::Wrappers::PerformanceData-constructors","title":"Constructors","text":""},{"location":"Grits/Wrappers/PerformanceData/#Grits::Wrappers::PerformanceData.new(perf)","title":"<code>.new(perf : Pointer(LibGit::CheckoutPerfdata))</code>","text":""},{"location":"Grits/Wrappers/PerformanceData/#Grits::Wrappers::PerformanceData-methods","title":"Methods","text":""},{"location":"Grits/Wrappers/PerformanceData/#Grits::Wrappers::PerformanceData#chmod_calls","title":"<code>#chmod_calls</code>","text":""},{"location":"Grits/Wrappers/PerformanceData/#Grits::Wrappers::PerformanceData#mkdir_calls","title":"<code>#mkdir_calls</code>","text":""},{"location":"Grits/Wrappers/PerformanceData/#Grits::Wrappers::PerformanceData#stat_calls","title":"<code>#stat_calls</code>","text":""},{"location":"Grits/Wrappers/PushUpdate/","title":"PushUpdate","text":""},{"location":"Grits/Wrappers/PushUpdate/#Grits::Wrappers::PushUpdate","title":"class <code>Grits::Wrappers::PushUpdate</code> inherits <code>Reference</code>","text":"Included modules <code>Grits::Mixins::Pointable</code>"},{"location":"Grits/Wrappers/PushUpdate/#Grits::Wrappers::PushUpdate-constructors","title":"Constructors","text":""},{"location":"Grits/Wrappers/PushUpdate/#Grits::Wrappers::PushUpdate.new(raw)","title":"<code>.new(raw : Pointer(LibGit::PushUpdate))</code>","text":""},{"location":"Grits/Wrappers/PushUpdate/#Grits::Wrappers::PushUpdate-methods","title":"Methods","text":""},{"location":"Grits/Wrappers/PushUpdate/#Grits::Wrappers::PushUpdate#destination","title":"<code>#destination</code>","text":""},{"location":"Grits/Wrappers/PushUpdate/#Grits::Wrappers::PushUpdate#destination_name","title":"<code>#destination_name</code>","text":""},{"location":"Grits/Wrappers/PushUpdate/#Grits::Wrappers::PushUpdate#source","title":"<code>#source</code>","text":""},{"location":"Grits/Wrappers/PushUpdate/#Grits::Wrappers::PushUpdate#source_name","title":"<code>#source_name</code>","text":""},{"location":"repositories/","title":"Repositories","text":"<p>The entrypoint for interacting with Grits is through Grits::Repo</p> <p>Most methods that return new git abstractions can be invoked with a block. Please use this interface.  Block forms of methods will automatically free the object.  If you don't do this, you'll need to call <code>#free</code> on objects manually.</p>  <p>Warning</p> <p>Manually managing objects may not be available in the future.</p>  <p>Example: Grits::Repo#free</p>"},{"location":"repositories/#opening-an-existing-repository","title":"Opening an existing repository","text":"<p>There are a few ways to open an existing repository.</p> <ul> <li>Open a repository -&gt; Grits::Repo.open</li> <li>Open a bare repository -&gt; Grits::Repo.open_bare</li> <li>Open a repository with extended controls -&gt; Grits::Repo.open_ext</li> </ul>"},{"location":"repositories/#normally","title":"Normally","text":"<pre><code>Grits::Repo.open(\"/path/to/repository\") do |repo|\n  # ... interact with repo\nend\n</code></pre>"},{"location":"repositories/#bare","title":"Bare","text":"<pre><code>Grits::Repo.open_bare(\"/path/to/repository\") do |repo|\n  # ... try to interact with repo\nend\n</code></pre>"},{"location":"repositories/#extended","title":"Extended","text":"<p>Opening a repository with extended controls provide more tuning than a normal open. You can provide an Array of Grits::OpenRepoType <code>flags</code> as well as a <code>GIT_PATH_LIST_SEPARATOR</code> delimited string of <code>ceiling_dirs</code> that define the upstream directories at which the search for a containing repository should terminate.</p>  <p>Note</p> <p>According to libgit2.  <code>GIT_PATH_LIST_SEPARATOR</code> is <code>;</code> on Windows, and <code>:</code> on everything else.</p>"},{"location":"repositories/#gritsopenrepotype","title":"Grits::OpenRepoType","text":"<code>Grits::OpenRepoType::NoSearch</code>  <p>Only open the repo if it can be immediately found in the path provided. Don't walk up parent directories to find the repository</p>  <code>Grits::OpenRepoType::AcrossFs</code>  <p>Unless this flag is set, open will not cross a filesystem boundary when searching.   </p>  <code>Grits::OpenRepoType::Bare</code>  <p>Open repository as a bare repo regardless of core.bare config, and   defer loading config file for faster setup.</p> <p>Unlike Grits::Repo.open_bare, this can follow gitlinks.</p>  <code>Grits::OpenRepoType::NoDotGit</code>  <p>Do not check for a repository by appending /.git to the start_path;   only open the repository if start_path itself points to the git   directory.</p>  <code>Grits::OpenRepoType::FromEnv</code>  <p>Find and open a git repository, respecting the environment variables   used by the git command-line tools.</p>   <pre><code># force the provided path to match the .git directory and don't search\n# across a filesystem boundary\nflags = [Grits::OpenRepoType::AcrossFs, Grits::OpenRepoType::NoDotGit]\n\n# teriminate the search at `/home/skinnyjames`\nceilings = \"/home/skinnyjames\"\n\nGrits::Repo.open_ext(\"/home/skinnyjames/src/grits/.git\", flags: flags, ceiling_dirs: ceilings) do |repo|\n  # ... interact with repo\nend\n</code></pre>"},{"location":"repositories/#initializing-a-new-repository","title":"Initializing a new repository","text":"<p>There are a couple of ways to initialize a new repository.</p> <ul> <li>Grits::Repo.init</li> <li>Grits::Repo.init_ext</li> </ul>"},{"location":"repositories/#normal","title":"Normal","text":"<pre><code># create an empty folder with 755 permissions at /path/to/folder\nGrits::Repo.init(\"/path/to/folder\", make: true, mode: 0o755) do |repo|\n  # ... interact\nend\n</code></pre>  <p>Note</p> <p>the <code>make</code> parameter defaults to <code>false</code>.  Don't include <code>make</code> and <code>mode</code> if the directory already exists.</p>"},{"location":"repositories/#extended_1","title":"Extended","text":"<p><code>Repo.init_ext</code> is the same as <code>Repo.init</code> except that it takes an additional <code>options</code> parameter.</p> <p><code>options</code> is a type of Grits::RepoInitOptions and allows for configuring the remote origin,  working directory, the initial name of <code>HEAD</code>, etc.</p>"},{"location":"repositories/#cloning-a-remote-repository","title":"Cloning a remote repository","text":"<p>There are a lot of ways to clone a repository.</p> <p>Most of the configuration takes place in Grits::CloneOptions, and you can configure things like:</p> <ul> <li>Callbacks and options for fetching the remote, such as providing credentials or configuring a proxy.</li> <li>Callbacks and options for checking out the repo after download, such as only checking out specific paths or tracking progress</li> </ul> <p>Lets dive in.</p>"},{"location":"repositories/#clone-with-default-options","title":"Clone with default options","text":"<pre><code># clone the remote to a local folder with default options\nGrits::Repo.clone(\n  \"https://gitlab.com/skinnyjames/grits.git\", \n  \"/home/skinnyjames/local_grits\"\n) do |repo|\n  # ... interact with repo\nend\n</code></pre>"},{"location":"repositories/#cloning-with-specific-options-gritscloneoptions","title":"Cloning with specific options (Grits::CloneOptions)","text":"<p>By default, <code>#clone</code> will use the default libgit2 clone options.</p> <p>You can change this by providing a Grits::CloneOptions parameter. The easiest way to get this is to call <code>Grits::CloneOptions.default</code></p> <p>Example</p> <pre><code>options = Grits::CloneOptions.default\n\n# add a username/password for auth\noptions.fetch_options.on_credentials_acquire do |credential|\n  credential.add_user_pass(\n    username: \"skinnyjames\",\n    password: ENV[\"SKINNYJAMES_ACCESS_TOKEN\"]\n  )\nend\n\n# add another remote\noptions.on_remote_create do |repo, name, url|\n  Grits::Remote.create(\n    repo, \n    \"github\", \n    \"https://github.com/skinnyjames/grits-clone.git\"\n  ) \nend\n\n# only checkout specific paths\noptions.checkout_options.paths = [\"src\", \"spec\"]\n\nGrits::Repo.clone(\n  \"https://gitlab.com/skinnyjames/grits.git\", \n  \"/home/skinnyjames/grits\", \n  options\n) do |repo|\n  # ... interact with repo\nend\n</code></pre>  <p>Info</p> <p>Many of the callbacks in Grits require a certain type of return value. For instance, Grits::FetchOptions#on_certificate_check requires a return of <code>Bool</code></p> <p>Returning <code>false</code> from this callback will cancel the clone.</p>"},{"location":"repositories/commit/","title":"Commiting changes","text":"<p>Commits are done via Grits::Commit.create, but it is currently prefered to use an entrypoint.</p> <p>Grits::Tree#commit will create a commit from a tree object. See libgit2 docs</p> <p>A commit takes the folling keyword parameters:</p>  <code>message</code>  <p>A message for the commit</p>  <code>author</code>  <p>A Grits::Commit::SignatureTuple detailing the <code>name</code>, <code>email</code> and <code>time</code> that the commit was created. Its type is <code>NamedTuple(name: String, email: String, time: Time)</code></p>  <code>committer</code>  <p>Same form as <code>author</code>, but detailing committer information.</p>  <code>parents</code>  <p>An array of Grits::Commit objects that describe the parents of this commit.</p>  <code>encoding</code>  <p>The encoding type for the commit message.  Default is <code>UTF-8</code></p>  <code>update_ref</code>  <p>The reference that will be updated to point to this commit.  Use <code>HEAD</code> to update the <code>HEAD</code> of the current branch.</p>"},{"location":"repositories/commit/#getting-commits-locating-parents","title":"Getting commits / locating parents","text":"<p><code>Grits::Repo#commit_at</code> takes a refspec and yields a <code>Grits::Commit</code> at that refspec.  It is provided by Grits::Mixins::Repository::Commit#commit_at.</p>"},{"location":"repositories/commit/#example","title":"Example","text":"<pre><code>require \"grits\"\n\ndest = \"#{__DIR__}/some_folder\"\n\nGrits::Repo.clone(\n  \"https://gitlab.com/skinnyjames/grits.git\", \n  dest, \n  options\n) do |repo|\n  # interact with the repo..\n  # create a new untracked file\n  File.write(\"#{dest}/new.txt\", \"Hello Grits.\\n\")\n\n  repo.index do |stage|\n    # add the new file to the staging index\n    stage.add(\"new.txt\")\n\n    File.open(\"#{path}/new.txt\", \"a\") do |io|\n      io.print \"Goodbye.\\n\"\n    end\n\n    # Write the index to a tree and yield it for commit\n    stage.write_tree do |tree|\n      repo.commit_at(\"HEAD\") do |parent|\n        committer = author = { \n          email: \"sean@skinnyjames.net\", \n          name: \"Sean Gregory\", \n          time: Time.utc \n        }\n\n        tree.commit(\n          author: author,\n          message: \"Hello World\",\n          committer: committer,\n          parents: [parent],\n          update_ref: \"HEAD\"\n        ) do |commit|\n          puts commit.message # =&gt; \"Hello World\"\n        end\n      end\n    end\n  end\nend\n</code></pre>"},{"location":"repositories/diff/","title":"Diffing changes","text":"<p>From the docs</p>  <p>A diff represents the cumulative list of differences between two snapshots of a repository (possibly filtered by a set of file name patterns).</p>"},{"location":"repositories/diff/#gritsdiff","title":"Grits::Diff","text":"<p>Various methods and callbacks yield a Grits::Diff.  Methods are exposed on a diff to compare differences on the level of </p> <ul> <li><code>Delta</code>: An encapsulation of the diff between 2 files (Grits::DiffDelta)</li> <li><code>File</code>: An oject representing a diffed file (Grits::DiffFile)</li> <li><code>Hunk</code>: A span of modified lines in a delta with context. (Grits::DiffHunk)</li> <li><code>Line</code>: A range of characters inside a <code>Hunk</code> (Grits::DiffLine)</li> </ul>"},{"location":"repositories/diff/#gritsdiffiterator","title":"Grits::DiffIterator","text":"<p>It is possible to setup an object to traverse the components of a diff.  This is done with Grits::DiffIterator</p> <p><code>DiffIterator</code> has event driven callbacks that are triggered by the traversal, and yield different parts of the diff to each one.</p> <pre><code># assuming a variable `some_diff` is a `Grits::Diff`\n\ndiff_iterator = Grits::DiffIterator.new\n\ndiff_iterator.on_file do |file|\n  # interact with file\nend\n\ndiff_iterator.on_hunk do |hunk|\n  # interact with hunk\nend\n\ndiff_iterator.on_line do |line|\n  # interact with the line\nend\n\ndiff_iterator.execute(some_diff)\n</code></pre>  <p>Warning</p> <p>The diff objects that are yielded to iterator methods will automatically be freed after the block ends.</p> <p>This means that the objects cannot be used outside of their respective blocks.</p> <p>Each diff object should have a <code>#data</code> method to return a copy of that object's values.  Ex: (Grits::LineData)</p> <p>Grits::Diff automatically captures these datapoints with Grits::Diff#files, Grits::Diff#hunks, and Grits::Diff#lines</p>"},{"location":"repositories/diff/#providing-options","title":"Providing options","text":"<p>Methods that return a <code>Grits::Diff</code> may take a Grits::DiffOptions.  </p> <p>The options can be configured to accomodate various intentions, such as adding context to the diff, ignoring file modes or blank lines, or providing an array of paths to seach against.</p> <p>The options also have callbacks to be notified of the diff progress and right before the delta is inserted into the diff.</p> <p>For example, to include untracked content in the diff.</p> <pre><code>diff_options = Grits::DiffOptions.default\ndiff_options.include_untracked\ndiff_options.show_untracked_content\n\ndata = &lt;&lt;-EOF\nThis is all new\n  lines and should\nbe present in the new\n    Diff\nEOF\n\nGrits::Repo.clone(some_url, some_path) do |repo|\n  File.write(\"#{some_path}/saved.txt\", data)\n  File.write(\"#{some_path}/new.txt\", data)\n\n  repo.index do |index|\n    # note that `saved.txt` and `new.txt` have not been added to the stage.\n    index.diff_workdir(diff_options) do |diff|\n      puts diff.files.size # =&gt; 2\n    end\n  end\nend\n</code></pre>"},{"location":"repositories/grits_index/","title":"Staging changes","text":"<p>Staging changes are done by interacting with the index.</p> <p>Grits provides Grits::Repo#index to yield a Grits::Index for interacting.</p>"},{"location":"repositories/grits_index/#adding-files","title":"Adding files","text":"<p>Adding files to the index can be done via</p> <ul> <li>Grits::Index#add_file</li> <li>Grits::Index#add_files</li> </ul> <p><code>Index#add_file</code> takes a single filename to add to the index.</p> <p>For adding multiple files or directories, there is <code>Index#add_files</code>.  <code>#add_files</code> takes the following parameters:</p> <ul> <li>an array of paths or glob expressions to add</li> <li>an array of <code>Grits::IndexAddOption</code> flags to modify the add behavior.</li> <li>a notification callback that yields the matching file and path expression for every file to be added.</li> </ul>"},{"location":"repositories/grits_index/#gritsindexaddoption","title":"Grits::IndexAddOption","text":"<p>Grits::IndexAddOption is an enum with the following values.</p>  <code>Grits::IndexAddOption::Default</code>  <p>Default behavior</p>  <code>Grits::IndexAddOption::Force</code>  <p>Files that are ignored will be skipped. Provide this flag to skip checking of ignore rules.</p>  <code>Grits::Index::AddOption::DisablePathspecMatch</code>  <p>Disable glob expansion and force exact matching</p>  <code>Grits::Index::AddOption::CheckPathspec</code>  <p>Generates an an error if the pathspec contains the exact path of an ignored file.</p>    <p>Note</p> <p>When using Grits::Index#add_files, you must provide a block that takes 2 parameters and returns <code>Bool?</code></p> <p>The parameters are </p> <ul> <li>the matched file</li> <li>the pathspec responsible for the match</li> </ul> <p>Returning</p> <ul> <li><code>true</code> from the block will proceed with adding to the index</li> <li><code>false</code> from the block will cancel adding the file</li> <li><code>nil</code> from the block will abort the transaction</li> </ul>"},{"location":"repositories/grits_index/#example","title":"Example","text":"<pre><code>repo_path = \"/some/path\"\n\nGrits::Repo.init(repo_path) do |repo|\n  File.write(\"#{repo_path}/top.txt\", \"content\\n\")\n\n  repo.index do |stage|\n    stage.add_files([\"top\"]) do |path, match|\n      true\n    end\n\n    File.open(\"#{repo_path}/top\", \"a\") { |io| io.print \"more\\n\" }\n  end\nend\n</code></pre>"},{"location":"repositories/grits_index/#peristing-changes-to-the-index","title":"Peristing changes to the index","text":"<p>When using <code>#add_files</code> or <code>#add_file</code> Grits::Index#write will persist the index changes to disk.</p> <p>There is also a method available that does both in one call. Grits::Index.add</p>"},{"location":"repositories/grits_index/#writing-to-a-tree","title":"Writing to a tree","text":"<p>In order to make a commit, the git index needs to be converted to a tree.</p> <p>Grits::Index.write_tree will write the contents of an index to a tree that is yielded to a block.</p> <pre><code>#...\nrepo.index do |stage|\n  stage.write_tree do |tree|\n    # use tree to make a commit\n  end\nend\n</code></pre>"}]}